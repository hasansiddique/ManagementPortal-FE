{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport axios from 'axios';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport reducers from './rootReducer';\nimport { refreshToken } from '../views/auth/auth.api';\nconst logger = createLogger();\n\nconst customMiddleWare = store => next => action => {\n  axios.interceptors.response.use(function (response) {\n    return response;\n  }, function (error) {\n    if (error.status === 401) {\n      // do something when unauthorized\n      store.dispatch(refreshToken());\n    }\n\n    return Promise.reject(error);\n  });\n  console.log(\"Middleware triggered:\", action);\n  next(action);\n};\n\nconst configureStore = predefinedState => {\n  return createStore(reducers, predefinedState, applyMiddleware(logger, customMiddleWare, thunk));\n};\n\nexport default configureStore;","map":{"version":3,"sources":["/home/honey/Desktop/Frontend/ManagementPortal-FE/src/state/configureStore.js"],"names":["createStore","applyMiddleware","axios","createLogger","thunk","reducers","refreshToken","logger","customMiddleWare","store","next","action","interceptors","response","use","error","status","dispatch","Promise","reject","console","log","configureStore","predefinedState"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,OAAOC,QAAP,MAAqB,eAArB;AACA,SAASC,YAAT,QAA6B,wBAA7B;AAEA,MAAMC,MAAM,GAAGJ,YAAY,EAA3B;;AACA,MAAMK,gBAAgB,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAClDT,EAAAA,KAAK,CAACU,YAAN,CAAmBC,QAAnB,CAA4BC,GAA5B,CAAgC,UAAUD,QAAV,EAAoB;AAClD,WAAOA,QAAP;AACD,GAFD,EAEG,UAAUE,KAAV,EAAiB;AAClB,QAAGA,KAAK,CAACC,MAAN,KAAiB,GAApB,EAAyB;AACvB;AACAP,MAAAA,KAAK,CAACQ,QAAN,CAAeX,YAAY,EAA3B;AACD;;AACD,WAAOY,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD,GARD;AASAK,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCV,MAArC;AACAD,EAAAA,IAAI,CAACC,MAAD,CAAJ;AACD,CAZD;;AAaA,MAAMW,cAAc,GAAIC,eAAD,IAAqB;AAC1C,SAAOvB,WAAW,CAChBK,QADgB,EAEhBkB,eAFgB,EAGhBtB,eAAe,CACbM,MADa,EAEXC,gBAFW,EAGbJ,KAHa,CAHC,CAAlB;AASD,CAVD;;AAYA,eAAekB,cAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport axios from 'axios';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nimport reducers from './rootReducer';\nimport { refreshToken } from '../views/auth/auth.api';\n\nconst logger = createLogger();\nconst customMiddleWare = store => next => action => {\n  axios.interceptors.response.use(function (response) {\n    return response;\n  }, function (error) {\n    if(error.status === 401) {\n      // do something when unauthorized\n      store.dispatch(refreshToken());\n    }\n    return Promise.reject(error);\n  });\n  console.log(\"Middleware triggered:\", action);\n  next(action);\n}\nconst configureStore = (predefinedState) => {\n  return createStore(\n    reducers,\n    predefinedState,\n    applyMiddleware(\n      logger,\n        customMiddleWare,\n      thunk,\n    ),\n  );\n};\n\nexport default configureStore;\n"]},"metadata":{},"sourceType":"module"}