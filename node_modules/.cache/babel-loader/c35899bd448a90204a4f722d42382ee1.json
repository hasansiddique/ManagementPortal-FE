{"ast":null,"code":"import get from 'lodash/get';\nimport CryptoJS from 'crypto-js';\nimport request from '../../common/request';\nimport storage from '../../common/storage';\nimport { HTTP_STATUS } from '../../common/constants';\nimport { openNotification } from '../../components/Notification';\nimport { requestUserLogin, userLoginSuccess, userLoginFailure, requestUserRegister, registerUserSuccess, registerUserFailure, requestUserLogout, userLogoutSuccess, userLogoutFailure, requestUserPasswordReset, userPasswordResetSuccess, userPasswordResetFailure, requestVerifyUserEmail, verifyUserEmailSuccess, verifyUserEmailFailure, requestResendUserVerification, resendUserVerificationSuccess, resendUserVerificationFailure, requestUserPasswordUpdate, userPasswordUpdateSuccess, userPasswordUpdateFailure } from './auth.actions';\nexport const getUser = () => {\n  return async dispatch => {\n    dispatch(requestUserLogin());\n\n    try {\n      const userId = get(storage.get('user'), 'user.id');\n      const res = await request.get(`/v1/users/${userId}`);\n      dispatch(userLoginSuccess(res.data || {})); // Encrypt\n\n      const encryptData = CryptoJS.AES.encrypt(JSON.stringify(res.data), 'secret key 123').toString(); // Decrypt\n\n      const bytes = CryptoJS.AES.decrypt(encryptData, 'secret key 123');\n      const decryptedData = JSON.parse(bytes.toString());\n      console.log('decryptedData', decryptedData);\n      return res;\n    } catch (err) {\n      dispatch(userLoginFailure(err));\n\n      if (err.response.status === HTTP_STATUS.UNAUTHORIZED) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Unauthorized User'\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request'\n        });\n      }\n\n      return null;\n    }\n  };\n};\nexport const loginUser = payload => {\n  return async dispatch => {\n    dispatch(requestUserLogin());\n\n    try {\n      const res = await request.post('/v1/users/login', payload);\n      dispatch(userLoginSuccess(res.data || {}));\n      storage.set('user', Object.assign({}, res.data));\n      window.location.reload();\n      return res;\n    } catch (err) {\n      dispatch(userLoginFailure(err));\n\n      if (err.response.status === HTTP_STATUS.UNAUTHORIZED || HTTP_STATUS.NOT_FOUND) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Invalid Login credentials!'\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request'\n        });\n      }\n\n      return null;\n    }\n  };\n};\nexport const registerUser = payload => {\n  return async dispatch => {\n    dispatch(requestUserRegister());\n\n    try {\n      const res = await request.post('/v1/users', payload);\n      dispatch(registerUserSuccess());\n      return res;\n    } catch (err) {\n      dispatch(registerUserFailure());\n\n      if (err.response.status === HTTP_STATUS.BAD_REQUEST) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Invalid Email!'\n        });\n      } else if (err.response.status === HTTP_STATUS.CONFLICT) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Email address already exists, please try different email address.'\n        });\n      }\n\n      return null;\n    }\n  };\n};\nexport const logoutUser = () => {\n  return async dispatch => {\n    dispatch(requestUserLogout());\n\n    try {\n      const refreshToken = get(storage.get('user'), 'token.refreshToken');\n      const data = {\n        token: refreshToken\n      };\n      const payload = JSON.stringify(data);\n      const res = await request.post(`/v1/users/logout`, payload);\n      dispatch(userLogoutSuccess());\n      storage.clear();\n      return res;\n    } catch (e) {\n      dispatch(userLogoutFailure());\n\n      if (e.response.status === HTTP_STATUS.BAD_REQUEST) {\n        return null;\n      }\n    }\n\n    return null;\n  };\n};\nexport const refreshToken = () => {\n  return async () => {\n    try {\n      const refreshToken = get(storage.get('user'), 'token.refreshToken');\n      const obj = storage.get('user');\n      const data = {\n        token: refreshToken\n      };\n      const payload = JSON.stringify(data);\n      const res = await request.post(`/v1/users/token`, payload);\n      storage.set('user', Object.assign(obj, {\n        token: {\n          accessToken: res.data.accessToken,\n          refreshToken: obj.token.refreshToken\n        }\n      }));\n      return res;\n    } catch (err) {\n      if (err.response.status === HTTP_STATUS.UNAUTHORIZED) {\n        storage.clear();\n      }\n    }\n  };\n};\nexport const userPasswordReset = data => {\n  return async dispatch => {\n    dispatch(requestUserPasswordReset());\n\n    try {\n      const res = await request.post('/v1/users/reset-password', data);\n      dispatch(userPasswordResetSuccess());\n      return res;\n    } catch (err) {\n      dispatch(userPasswordResetFailure());\n\n      if (err.response.status === HTTP_STATUS.BAD_REQUEST) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request'\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Account',\n          description: 'Some thing went wrong while making the request'\n        });\n      }\n    }\n\n    return null;\n  };\n};\nexport const verifyUserEmail = token => {\n  return async dispatch => {\n    dispatch(requestVerifyUserEmail());\n\n    try {\n      const res = await request.post(`/v1/users/confirm/${token}`);\n      dispatch(verifyUserEmailSuccess(res.data));\n      return res;\n    } catch (err) {\n      dispatch(verifyUserEmailFailure());\n\n      if (err.response.status === HTTP_STATUS.NOT_FOUND) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Invalid User!'\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request'\n        });\n      }\n    }\n\n    return null;\n  };\n};\nexport const resendEmailVerification = data => {\n  return async dispatch => {\n    dispatch(requestResendUserVerification());\n\n    try {\n      const res = await request.post('/v1/users/resend-confirmation', data);\n      dispatch(resendUserVerificationSuccess(res.data));\n      return res;\n    } catch (err) {\n      dispatch(resendUserVerificationFailure());\n\n      if (err.response.status === HTTP_STATUS.BAD_REQUEST) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Incorrect Email Address, Please try again'\n        });\n      } else if (err.response.status === HTTP_STATUS.NOT_FOUND) {\n        openNotification({\n          type: 'error',\n          title: 'User Account',\n          description: 'Invalid Email Address, Please ty again'\n        });\n      } else if (err.response.status === HTTP_STATUS.CONFLICT) {\n        openNotification({\n          type: 'error',\n          title: 'User Account',\n          description: 'Email is already confirmed.'\n        });\n      }\n    }\n\n    return null;\n  };\n};\nexport const userPasswordUpdate = payload => {\n  return async dispatch => {\n    dispatch(requestUserPasswordUpdate());\n\n    try {\n      const res = await request.put('/v1/users/update-password', payload);\n      dispatch(userPasswordUpdateSuccess());\n\n      if (res.status === 200) {\n        openNotification({\n          type: 'success',\n          title: 'User Login',\n          description: 'Password SuccessFully Updated'\n        });\n      }\n\n      return res;\n    } catch (err) {\n      dispatch(userPasswordUpdateFailure());\n\n      if (err.response.status === HTTP_STATUS.BAD_REQUEST) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request'\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Account',\n          description: 'Some thing went wrong while making the request'\n        });\n      }\n    }\n\n    return null;\n  };\n};","map":{"version":3,"sources":["/home/honey/Desktop/Frontend/ManagementPortal-FE/src/views/auth/auth.api.js"],"names":["get","CryptoJS","request","storage","HTTP_STATUS","openNotification","requestUserLogin","userLoginSuccess","userLoginFailure","requestUserRegister","registerUserSuccess","registerUserFailure","requestUserLogout","userLogoutSuccess","userLogoutFailure","requestUserPasswordReset","userPasswordResetSuccess","userPasswordResetFailure","requestVerifyUserEmail","verifyUserEmailSuccess","verifyUserEmailFailure","requestResendUserVerification","resendUserVerificationSuccess","resendUserVerificationFailure","requestUserPasswordUpdate","userPasswordUpdateSuccess","userPasswordUpdateFailure","getUser","dispatch","userId","res","data","encryptData","AES","encrypt","JSON","stringify","toString","bytes","decrypt","decryptedData","parse","console","log","err","response","status","UNAUTHORIZED","type","title","description","loginUser","payload","post","set","Object","assign","window","location","reload","NOT_FOUND","registerUser","BAD_REQUEST","CONFLICT","logoutUser","refreshToken","token","clear","e","obj","accessToken","userPasswordReset","verifyUserEmail","resendEmailVerification","userPasswordUpdate","put"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\nimport CryptoJS from 'crypto-js';\n\nimport request from '../../common/request';\nimport storage from '../../common/storage';\nimport { HTTP_STATUS } from '../../common/constants';\nimport { openNotification } from '../../components/Notification';\nimport {\n  requestUserLogin,\n  userLoginSuccess,\n  userLoginFailure,\n\n  requestUserRegister,\n  registerUserSuccess,\n  registerUserFailure,\n\n  requestUserLogout,\n  userLogoutSuccess,\n  userLogoutFailure,\n\n  requestUserPasswordReset,\n  userPasswordResetSuccess,\n  userPasswordResetFailure,\n\n  requestVerifyUserEmail,\n  verifyUserEmailSuccess,\n  verifyUserEmailFailure,\n\n  requestResendUserVerification,\n  resendUserVerificationSuccess,\n  resendUserVerificationFailure,\n\n    requestUserPasswordUpdate,\n    userPasswordUpdateSuccess,\n    userPasswordUpdateFailure,\n\n\n} from './auth.actions';\n\nexport const getUser = () => {\n  return async (dispatch) => {\n    dispatch(requestUserLogin());\n\n    try {\n      const userId = get(storage.get('user'), 'user.id');\n      const res = await request.get(`/v1/users/${userId}`);\n      dispatch(userLoginSuccess(res.data|| {}));\n      // Encrypt\n      const encryptData = CryptoJS.AES.encrypt(JSON.stringify(res.data), 'secret key 123').toString();\n      // Decrypt\n      const bytes  = CryptoJS.AES.decrypt(encryptData, 'secret key 123');\n      const decryptedData = JSON.parse(bytes.toString());\n      console.log('decryptedData', decryptedData);\n      return res;\n    } catch (err) {\n      dispatch(userLoginFailure(err));\n      if (err.response.status === HTTP_STATUS.UNAUTHORIZED) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Unauthorized User',\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request',\n        });\n      }\n\n      return null;\n    }\n  };\n};\n\nexport const loginUser = (payload) => {\n  return async (dispatch) => {\n    dispatch(requestUserLogin());\n\n    try {\n      const res = await request.post('/v1/users/login', payload);\n\n      dispatch(userLoginSuccess(res.data || {}));\n      storage.set('user', Object.assign({}, res.data));\n      window.location.reload();\n      return res;\n    } catch (err) {\n      dispatch(userLoginFailure(err));\n      if (err.response.status === HTTP_STATUS.UNAUTHORIZED || HTTP_STATUS.NOT_FOUND) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Invalid Login credentials!',\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request',\n        });\n      }\n      return null;\n    }\n  };\n};\n\nexport const registerUser = (payload) => {\n  return async (dispatch) => {\n    dispatch(requestUserRegister());\n\n    try {\n      const res = await request.post('/v1/users', payload);\n      dispatch(registerUserSuccess());\n      return res;\n    } catch (err) {\n      dispatch(registerUserFailure());\n      if (err.response.status === HTTP_STATUS.BAD_REQUEST) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Invalid Email!',\n        });\n      } else if (err.response.status === HTTP_STATUS.CONFLICT) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Email address already exists, please try different email address.',\n        });\n      }\n      return null;\n    }\n  };\n};\n\nexport const logoutUser = () => {\n  return async (dispatch) => {\n    dispatch(requestUserLogout());\n    try {\n      const refreshToken = get(storage.get('user'), 'token.refreshToken');\n      const data = { token: refreshToken };\n      const payload = JSON.stringify(data);\n      const res = await request.post(`/v1/users/logout`, payload);\n      dispatch(userLogoutSuccess());\n      storage.clear();\n\n      return res;\n    } catch (e) {\n      dispatch(userLogoutFailure());\n      if (e.response.status === HTTP_STATUS.BAD_REQUEST) {\n        return null;\n      }\n    }\n    return null;\n  };\n};\n\nexport const refreshToken = () => {\n  return async () => {\n    try {\n      const refreshToken = get(storage.get('user'), 'token.refreshToken');\n      const obj = storage.get('user');\n      const data = { token: refreshToken };\n      const payload = JSON.stringify(data);\n      const res = await request.post(`/v1/users/token`, payload);\n      storage.set('user', Object.assign(obj,{token: {accessToken: res.data.accessToken, refreshToken: obj.token.refreshToken}}));\n      return res;\n    } catch (err) {\n      if (err.response.status === HTTP_STATUS.UNAUTHORIZED) {\n        storage.clear();\n      }\n    }\n  };\n};\n\nexport const userPasswordReset = (data) => {\n  return async (dispatch) => {\n    dispatch(requestUserPasswordReset());\n\n    try {\n      const res = await request.post('/v1/users/reset-password', data);\n      dispatch(userPasswordResetSuccess());\n      return res;\n    } catch (err) {\n      dispatch(userPasswordResetFailure());\n      if (err.response.status === HTTP_STATUS.BAD_REQUEST) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request',\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Account',\n          description: 'Some thing went wrong while making the request',\n        });\n      }\n    }\n    return null;\n  };\n};\n\nexport const verifyUserEmail = (token) => {\n  return async (dispatch) => {\n    dispatch(requestVerifyUserEmail());\n\n    try {\n      const res = await request.post(`/v1/users/confirm/${token}`);\n      dispatch(verifyUserEmailSuccess(res.data));\n      return res;\n    } catch (err) {\n      dispatch(verifyUserEmailFailure());\n      if (err.response.status === HTTP_STATUS.NOT_FOUND) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Invalid User!',\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request',\n        });\n      }\n    }\n    return null;\n  };\n};\n\n\nexport const resendEmailVerification = (data) => {\n  return async (dispatch) => {\n    dispatch(requestResendUserVerification());\n\n    try {\n      const res = await request.post('/v1/users/resend-confirmation', data);\n      dispatch(resendUserVerificationSuccess(res.data));\n      return res;\n    } catch (err) {\n      dispatch(resendUserVerificationFailure());\n      if (err.response.status === HTTP_STATUS.BAD_REQUEST) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Incorrect Email Address, Please try again',\n        });\n      } else if (err.response.status === HTTP_STATUS.NOT_FOUND) {\n        openNotification({\n          type: 'error',\n          title: 'User Account',\n          description: 'Invalid Email Address, Please ty again',\n        });\n      } else if (err.response.status === HTTP_STATUS.CONFLICT) {\n        openNotification({\n          type: 'error',\n          title: 'User Account',\n          description: 'Email is already confirmed.',\n        });\n      }\n    }\n    return null;\n  };\n};\n\nexport const userPasswordUpdate = (payload) => {\n  return async (dispatch) => {\n    dispatch(requestUserPasswordUpdate());\n\n    try {\n      const res = await request.put('/v1/users/update-password', payload);\n      dispatch(userPasswordUpdateSuccess());\n      if (res.status === 200) {\n        openNotification({\n          type: 'success',\n          title: 'User Login',\n          description: 'Password SuccessFully Updated',\n        });\n      }\n      return res;\n    } catch (err) {\n      dispatch(userPasswordUpdateFailure());\n      if (err.response.status === HTTP_STATUS.BAD_REQUEST) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request',\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Account',\n          description: 'Some thing went wrong while making the request',\n        });\n      }\n    }\n    return null;\n  };\n};\n"]},"metadata":{},"sourceType":"module"}