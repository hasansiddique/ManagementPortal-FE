{"ast":null,"code":"import { Map } from 'immutable';\nimport { createReducer } from 'redux-act';\nimport { requestEmployeeCreation, EmployeeCreationSuccess, EmployeeCreationFailure, requestFetchingEmployees, EmployeeFetchingSuccess, EmployeeFetchingFailure, requestEmployeeDeletion, EmployeeDeletionSuccess, EmployeeDeletionFailure } from './dashboard.actions';\nimport { CREATING, CREATED, FAILURE, FETCHING, FETCHED } from '../../common/constants';\nconst defaultState = Map({\n  employee: [],\n  loading: true,\n  error: null,\n  isFetching: '',\n  isFetched: false,\n  isCreating: '',\n  isCreatingSuccess: false\n});\nconst reducer = createReducer({\n  [requestEmployeeCreation]: state => {\n    return state.set('isCreating', CREATING).set('isCreatingSuccess', false);\n  },\n  [EmployeeCreationSuccess]: state => {\n    return state.set('isCreating', CREATED).set('isCreatingSuccess', true);\n  },\n  [EmployeeCreationFailure]: state => {\n    return state.set('isCreating', FAILURE).set('isCreatingSuccess', false);\n  },\n  [requestFetchingEmployees]: state => {\n    return state.set('isFetching', FETCHING).set('loading', true).set('employee', []).set('error', null).set('isFetched', false);\n  },\n  [EmployeeFetchingSuccess]: (state, action) => {\n    return state.set('isFetching', FETCHED).set('loading', false).set('employee', action.employee).set('error', null).set('isFetched', true);\n  },\n  [EmployeeFetchingFailure]: (state, action) => {\n    return state.set('isFetching', FAILURE).set('loading', false).set('employee', []).set('error', action.err).set('isFetched', false);\n  }\n}, defaultState);\nexport default reducer;","map":{"version":3,"sources":["/home/honey/Desktop/Frontend/ManagementPortal-FE/src/views/dashboard/dashboard.reducer.js"],"names":["Map","createReducer","requestEmployeeCreation","EmployeeCreationSuccess","EmployeeCreationFailure","requestFetchingEmployees","EmployeeFetchingSuccess","EmployeeFetchingFailure","requestEmployeeDeletion","EmployeeDeletionSuccess","EmployeeDeletionFailure","CREATING","CREATED","FAILURE","FETCHING","FETCHED","defaultState","employee","loading","error","isFetching","isFetched","isCreating","isCreatingSuccess","reducer","state","set","action","err"],"mappings":"AAAA,SAASA,GAAT,QAAoB,WAApB;AACA,SAASC,aAAT,QAA8B,WAA9B;AAEA,SACIC,uBADJ,EAEIC,uBAFJ,EAGIC,uBAHJ,EAKIC,wBALJ,EAMIC,uBANJ,EAOIC,uBAPJ,EASIC,uBATJ,EAUIC,uBAVJ,EAWIC,uBAXJ,QAaO,qBAbP;AAeA,SACIC,QADJ,EAEIC,OAFJ,EAGIC,OAHJ,EAIIC,QAJJ,EAKIC,OALJ,QAMO,wBANP;AAQA,MAAMC,YAAY,GAAGhB,GAAG,CAAC;AACrBiB,EAAAA,QAAQ,EAAE,EADW;AAErBC,EAAAA,OAAO,EAAE,IAFY;AAGrBC,EAAAA,KAAK,EAAE,IAHc;AAIrBC,EAAAA,UAAU,EAAE,EAJS;AAKrBC,EAAAA,SAAS,EAAE,KALU;AAMrBC,EAAAA,UAAU,EAAE,EANS;AAOrBC,EAAAA,iBAAiB,EAAE;AAPE,CAAD,CAAxB;AAUA,MAAMC,OAAO,GAAGvB,aAAa,CAAC;AAC1B,GAACC,uBAAD,GAA4BuB,KAAD,IAAW;AAClC,WAAOA,KAAK,CACPC,GADE,CACE,YADF,EACgBf,QADhB,EAEFe,GAFE,CAEE,mBAFF,EAEuB,KAFvB,CAAP;AAGH,GALyB;AAM1B,GAACvB,uBAAD,GAA4BsB,KAAD,IAAW;AAClC,WAAOA,KAAK,CACPC,GADE,CACE,YADF,EACgBd,OADhB,EAEFc,GAFE,CAEE,mBAFF,EAEuB,IAFvB,CAAP;AAGH,GAVyB;AAW1B,GAACtB,uBAAD,GAA4BqB,KAAD,IAAW;AAClC,WAAOA,KAAK,CACPC,GADE,CACE,YADF,EACgBb,OADhB,EAEFa,GAFE,CAEE,mBAFF,EAEuB,KAFvB,CAAP;AAGH,GAfyB;AAgB1B,GAACrB,wBAAD,GAA6BoB,KAAD,IAAW;AACnC,WAAOA,KAAK,CACPC,GADE,CACE,YADF,EACgBZ,QADhB,EAEFY,GAFE,CAEE,SAFF,EAEa,IAFb,EAGFA,GAHE,CAGE,UAHF,EAGc,EAHd,EAIFA,GAJE,CAIE,OAJF,EAIW,IAJX,EAKFA,GALE,CAKE,WALF,EAKe,KALf,CAAP;AAMH,GAvByB;AAwB1B,GAACpB,uBAAD,GAA2B,CAACmB,KAAD,EAAQE,MAAR,KAAmB;AAC1C,WAAOF,KAAK,CACPC,GADE,CACE,YADF,EACgBX,OADhB,EAEFW,GAFE,CAEE,SAFF,EAEa,KAFb,EAGFA,GAHE,CAGE,UAHF,EAGcC,MAAM,CAACV,QAHrB,EAIFS,GAJE,CAIE,OAJF,EAIW,IAJX,EAKFA,GALE,CAKE,WALF,EAKe,IALf,CAAP;AAMH,GA/ByB;AAgC1B,GAACnB,uBAAD,GAA2B,CAACkB,KAAD,EAAQE,MAAR,KAAmB;AAC1C,WAAOF,KAAK,CACPC,GADE,CACE,YADF,EACgBb,OADhB,EAEFa,GAFE,CAEE,SAFF,EAEa,KAFb,EAGFA,GAHE,CAGE,UAHF,EAGc,EAHd,EAIFA,GAJE,CAIE,OAJF,EAIWC,MAAM,CAACC,GAJlB,EAKFF,GALE,CAKE,WALF,EAKe,KALf,CAAP;AAMH;AAvCyB,CAAD,EAwC1BV,YAxC0B,CAA7B;AA0CA,eAAeQ,OAAf","sourcesContent":["import { Map } from 'immutable';\nimport { createReducer } from 'redux-act';\n\nimport {\n    requestEmployeeCreation,\n    EmployeeCreationSuccess,\n    EmployeeCreationFailure,\n\n    requestFetchingEmployees,\n    EmployeeFetchingSuccess,\n    EmployeeFetchingFailure,\n\n    requestEmployeeDeletion,\n    EmployeeDeletionSuccess,\n    EmployeeDeletionFailure,\n\n} from './dashboard.actions'\n\nimport {\n    CREATING,\n    CREATED,\n    FAILURE,\n    FETCHING,\n    FETCHED,\n} from '../../common/constants';\n\nconst defaultState = Map({\n    employee: [],\n    loading: true,\n    error: null,\n    isFetching: '',\n    isFetched: false,\n    isCreating: '',\n    isCreatingSuccess: false,\n});\n\nconst reducer = createReducer({\n    [requestEmployeeCreation]: (state) => {\n        return state\n            .set('isCreating', CREATING)\n            .set('isCreatingSuccess', false);\n    },\n    [EmployeeCreationSuccess]: (state) => {\n        return state\n            .set('isCreating', CREATED)\n            .set('isCreatingSuccess', true);\n    },\n    [EmployeeCreationFailure]: (state) => {\n        return state\n            .set('isCreating', FAILURE)\n            .set('isCreatingSuccess', false);\n    },\n    [requestFetchingEmployees]: (state) => {\n        return state\n            .set('isFetching', FETCHING)\n            .set('loading', true)\n            .set('employee', [])\n            .set('error', null)\n            .set('isFetched', false)\n    },\n    [EmployeeFetchingSuccess]: (state, action) => {\n        return state\n            .set('isFetching', FETCHED)\n            .set('loading', false)\n            .set('employee', action.employee)\n            .set('error', null)\n            .set('isFetched', true)\n    },\n    [EmployeeFetchingFailure]: (state, action) => {\n        return state\n            .set('isFetching', FAILURE)\n            .set('loading', false)\n            .set('employee', [] )\n            .set('error', action.err)\n            .set('isFetched', false)\n    },\n}, defaultState);\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}