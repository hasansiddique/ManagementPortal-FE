{"ast":null,"code":"import get from 'lodash/get';\nimport request from '../../common/request';\nimport storage from '../../common/storage';\nimport { HTTP_STATUS } from '../../common/constants';\nimport { openNotification } from '../../components/Notification';\nimport { requestUserLogin, userLoginSuccess, userLoginFailure, requestUserRegister, registerUserSuccess, registerUserFailure, requestUserLogout, userLogoutSuccess, userLogoutFailure, requestUserPasswordReset, userPasswordResetSuccess, userPasswordResetFailure, requestVerifyUserEmail, verifyUserEmailSuccess, verifyUserEmailFailure, requestResendUserVerification, resendUserVerificationSuccess, resendUserVerificationFailure } from './auth.actions';\nexport const getUser = () => {\n  return async dispatch => {\n    dispatch(requestUserLogin());\n\n    try {\n      const userId = get(storage.get('user'), 'user.id');\n      const res = await request.get(`/v1/users/${userId}`);\n      dispatch(userLoginSuccess(res.data || {}));\n      console.log(res.data.user);\n      return res;\n    } catch (err) {\n      dispatch(userLoginFailure(err));\n      console.log(err);\n\n      if (err.response.status === HTTP_STATUS.UNAUTHORIZED) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Unauthorized User'\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request'\n        });\n      }\n\n      return null;\n    }\n  };\n};\nexport const loginUser = payload => {\n  return async dispatch => {\n    dispatch(requestUserLogin());\n\n    try {\n      const res = await request.post('/v1/users/login', payload);\n      dispatch(userLoginSuccess(res.data || {}));\n      storage.set('user', Object.assign(res.data, {}));\n      window.location.reload();\n      return res;\n    } catch (err) {\n      dispatch(userLoginFailure(err));\n\n      if (err.response.status === HTTP_STATUS.UNAUTHORIZED || HTTP_STATUS.NOT_FOUND) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Invalid Login credentials!'\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request'\n        });\n      }\n\n      return null;\n    }\n  };\n};\nexport const registerUser = payload => {\n  return async dispatch => {\n    dispatch(requestUserRegister());\n\n    try {\n      const res = await request.post('/v1/users', payload);\n      dispatch(registerUserSuccess());\n      return res;\n    } catch (err) {\n      dispatch(registerUserFailure());\n\n      if (err.response.status === HTTP_STATUS.BAD_REQUEST) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Invalid Email!'\n        });\n      } else if (err.response.status === HTTP_STATUS.CONFLICT) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Email address already exists, please try different email address.'\n        });\n      }\n\n      return null;\n    }\n  };\n};\nexport const logoutUser = () => {\n  return async dispatch => {\n    dispatch(requestUserLogout());\n\n    try {\n      const refreshToken = get(storage.get('user'), 'token.refreshToken');\n      const data = {\n        token: refreshToken\n      };\n      const payload = JSON.stringify(data);\n      const res = await request.post(`/v1/users/logout`, payload);\n      dispatch(userLogoutSuccess());\n      storage.clear();\n      return res;\n    } catch (e) {\n      dispatch(userLogoutFailure());\n\n      if (e.response.status === HTTP_STATUS.BAD_REQUEST) {\n        return null;\n      }\n    }\n\n    return null;\n  };\n};\nexport const refreshToken = () => {\n  return async () => {\n    try {\n      const refreshToken = get(storage.get('user'), 'token.refreshToken');\n      const test1 = get(storage.get('user'), 'token.accessToken');\n      console.log('accessToken before', test1);\n      const data = {\n        token: refreshToken\n      };\n      const payload = JSON.stringify(data);\n      const res = await request.post(`/v1/users/token`, payload);\n      storage.set('user', Object.assign(res.data, {}));\n      const test = get(storage.get('user'), 'token.accessToken');\n      console.log('accessToken after', test);\n    } catch (err) {\n      if (err.response.status === HTTP_STATUS.BAD_REQUEST || HTTP_STATUS.NOT_FOUND) {\n        return null;\n      }\n    }\n\n    return null;\n  };\n};\nexport const userPasswordReset = data => {\n  return async dispatch => {\n    dispatch(requestUserPasswordReset());\n\n    try {\n      const res = await request.post('/v1/users/reset-password', data);\n      dispatch(userPasswordResetSuccess(res.data));\n      return res;\n    } catch (err) {\n      dispatch(userPasswordResetFailure());\n\n      if (err.response.status === HTTP_STATUS.BAD_REQUEST) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request'\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Account',\n          description: 'Some thing went wrong while making the request'\n        });\n      }\n    }\n\n    return null;\n  };\n};\nexport const verifyUserEmail = token => {\n  return async dispatch => {\n    dispatch(requestVerifyUserEmail());\n\n    try {\n      const res = await request.post(`/v1/users/confirm/${token}`);\n      dispatch(verifyUserEmailSuccess(res.data));\n      return res;\n    } catch (err) {\n      dispatch(verifyUserEmailFailure());\n\n      if (err.response.status === HTTP_STATUS.NOT_FOUND) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Invalid User!'\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request'\n        });\n      }\n    }\n\n    return null;\n  };\n};\nexport const resendEmailVerification = data => {\n  return async dispatch => {\n    dispatch(requestResendUserVerification());\n\n    try {\n      const res = await request.post('/v1/users/resend-confirmation', data);\n      dispatch(resendUserVerificationSuccess(res.data));\n      return res;\n    } catch (err) {\n      dispatch(resendUserVerificationFailure());\n\n      if (err.response.status === HTTP_STATUS.BAD_REQUEST) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Incorrect Email Address, Please try again'\n        });\n      } else if (err.response.status === HTTP_STATUS.NOT_FOUND) {\n        openNotification({\n          type: 'error',\n          title: 'User Account',\n          description: 'Invalid Email Address, Please ty again'\n        });\n      } else if (err.response.status === HTTP_STATUS.CONFLICT) {\n        openNotification({\n          type: 'error',\n          title: 'User Account',\n          description: 'Email is already confirmed.'\n        });\n      }\n    }\n\n    return null;\n  };\n};","map":{"version":3,"sources":["/home/honey/Desktop/Frontend/ManagementPortal-FE/src/views/auth/auth.api.js"],"names":["get","request","storage","HTTP_STATUS","openNotification","requestUserLogin","userLoginSuccess","userLoginFailure","requestUserRegister","registerUserSuccess","registerUserFailure","requestUserLogout","userLogoutSuccess","userLogoutFailure","requestUserPasswordReset","userPasswordResetSuccess","userPasswordResetFailure","requestVerifyUserEmail","verifyUserEmailSuccess","verifyUserEmailFailure","requestResendUserVerification","resendUserVerificationSuccess","resendUserVerificationFailure","getUser","dispatch","userId","res","data","console","log","user","err","response","status","UNAUTHORIZED","type","title","description","loginUser","payload","post","set","Object","assign","window","location","reload","NOT_FOUND","registerUser","BAD_REQUEST","CONFLICT","logoutUser","refreshToken","token","JSON","stringify","clear","e","test1","test","userPasswordReset","verifyUserEmail","resendEmailVerification"],"mappings":"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","sourcesContent":["import get from 'lodash/get';\n\nimport request from '../../common/request';\nimport storage from '../../common/storage';\nimport { HTTP_STATUS } from '../../common/constants';\nimport { openNotification } from '../../components/Notification';\nimport {\n  requestUserLogin,\n  userLoginSuccess,\n  userLoginFailure,\n\n  requestUserRegister,\n  registerUserSuccess,\n  registerUserFailure,\n\n  requestUserLogout,\n  userLogoutSuccess,\n  userLogoutFailure,\n\n  requestUserPasswordReset,\n  userPasswordResetSuccess,\n  userPasswordResetFailure,\n\n  requestVerifyUserEmail,\n  verifyUserEmailSuccess,\n  verifyUserEmailFailure,\n\n  requestResendUserVerification,\n  resendUserVerificationSuccess,\n  resendUserVerificationFailure,\n\n} from './auth.actions';\n\nexport const getUser = () => {\n  return async (dispatch) => {\n    dispatch(requestUserLogin());\n\n    try {\n      const userId = get(storage.get('user'), 'user.id');\n      const res = await request.get(`/v1/users/${userId}`);\n      dispatch(userLoginSuccess(res.data || {}));\n      console.log(res.data.user)\n      return res;\n    } catch (err) {\n      dispatch(userLoginFailure(err));\n      console.log(err);\n      if (err.response.status === HTTP_STATUS.UNAUTHORIZED) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Unauthorized User',\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request',\n        });\n      }\n\n      return null;\n    }\n  };\n};\n\nexport const loginUser = (payload) => {\n  return async (dispatch) => {\n    dispatch(requestUserLogin());\n\n    try {\n      const res = await request.post('/v1/users/login', payload);\n\n      dispatch(userLoginSuccess(res.data || {}));\n      storage.set('user', Object.assign(res.data, {}));\n      window.location.reload();\n      return res;\n    } catch (err) {\n      dispatch(userLoginFailure(err));\n      if (err.response.status === HTTP_STATUS.UNAUTHORIZED || HTTP_STATUS.NOT_FOUND) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Invalid Login credentials!',\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request',\n        });\n      }\n      return null;\n    }\n  };\n};\n\nexport const registerUser = (payload) => {\n  return async (dispatch) => {\n    dispatch(requestUserRegister());\n\n    try {\n      const res = await request.post('/v1/users', payload);\n      dispatch(registerUserSuccess());\n      return res;\n    } catch (err) {\n      dispatch(registerUserFailure());\n      if (err.response.status === HTTP_STATUS.BAD_REQUEST) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Invalid Email!',\n        });\n      } else if (err.response.status === HTTP_STATUS.CONFLICT) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Email address already exists, please try different email address.',\n        });\n      }\n      return null;\n    }\n  };\n};\n\nexport const logoutUser = () => {\n  return async (dispatch) => {\n    dispatch(requestUserLogout());\n    try {\n      const refreshToken = get(storage.get('user'), 'token.refreshToken');\n      const data = { token: refreshToken };\n      const payload = JSON.stringify(data);\n      const res = await request.post(`/v1/users/logout`, payload);\n      dispatch(userLogoutSuccess());\n      storage.clear();\n\n      return res;\n    } catch (e) {\n      dispatch(userLogoutFailure());\n      if (e.response.status === HTTP_STATUS.BAD_REQUEST) {\n        return null;\n      }\n    }\n    return null;\n  };\n};\n\nexport const refreshToken = () => {\n  return async () => {\n    try {\n      const refreshToken = get(storage.get('user'), 'token.refreshToken');\n      const test1 = get(storage.get('user'), 'token.accessToken');\n      console.log('accessToken before', test1);\n      const data = { token: refreshToken };\n      const payload = JSON.stringify(data);\n      const res = await request.post(`/v1/users/token`, payload);\n      storage.set('user', Object.assign(res.data, {}));\n      const test = get(storage.get('user'), 'token.accessToken');\n      console.log('accessToken after', test);\n    } catch (err) {\n      if (err.response.status === HTTP_STATUS.BAD_REQUEST || HTTP_STATUS.NOT_FOUND) {\n        return null;\n      }\n    }\n    return null;\n  };\n};\n\nexport const userPasswordReset = (data) => {\n  return async (dispatch) => {\n    dispatch(requestUserPasswordReset());\n\n    try {\n      const res = await request.post('/v1/users/reset-password', data);\n      dispatch(userPasswordResetSuccess(res.data));\n      return res;\n    } catch (err) {\n      dispatch(userPasswordResetFailure());\n      if (err.response.status === HTTP_STATUS.BAD_REQUEST) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request',\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Account',\n          description: 'Some thing went wrong while making the request',\n        });\n      }\n    }\n    return null;\n  };\n};\n\nexport const verifyUserEmail = (token) => {\n  return async (dispatch) => {\n    dispatch(requestVerifyUserEmail());\n\n    try {\n      const res = await request.post(`/v1/users/confirm/${token}`);\n      dispatch(verifyUserEmailSuccess(res.data));\n      return res;\n    } catch (err) {\n      dispatch(verifyUserEmailFailure());\n      if (err.response.status === HTTP_STATUS.NOT_FOUND) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Invalid User!',\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request',\n        });\n      }\n    }\n    return null;\n  };\n};\n\n\nexport const resendEmailVerification = (data) => {\n  return async (dispatch) => {\n    dispatch(requestResendUserVerification());\n\n    try {\n      const res = await request.post('/v1/users/resend-confirmation', data);\n      dispatch(resendUserVerificationSuccess(res.data));\n      return res;\n    } catch (err) {\n      dispatch(resendUserVerificationFailure());\n      if (err.response.status === HTTP_STATUS.BAD_REQUEST) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Incorrect Email Address, Please try again',\n        });\n      } else if (err.response.status === HTTP_STATUS.NOT_FOUND) {\n        openNotification({\n          type: 'error',\n          title: 'User Account',\n          description: 'Invalid Email Address, Please ty again',\n        });\n      } else if (err.response.status === HTTP_STATUS.CONFLICT) {\n        openNotification({\n          type: 'error',\n          title: 'User Account',\n          description: 'Email is already confirmed.',\n        });\n      }\n    }\n    return null;\n  };\n};\n"]},"metadata":{},"sourceType":"module"}