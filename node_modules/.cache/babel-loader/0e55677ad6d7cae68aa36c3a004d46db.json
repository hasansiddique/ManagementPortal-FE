{"ast":null,"code":"var _jsxFileName = \"/home/honey/Desktop/Frontend/ManagementPortal-FE/src/views/auth/views/Register.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Input, Button, Result } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { UserOutlined, MailOutlined, LockOutlined } from '@ant-design/icons';\n\nconst Register = ({\n  handleSubmit,\n  isRegistering,\n  isRegisterSuccess\n}) => {\n  const onFinish = values => {\n    handleSubmit(values);\n  };\n\n  return [React.createElement(\"div\", {\n    key: \"div1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, isRegisterSuccess ? React.createElement(Result, {\n    status: \"success\",\n    title: \"Welcome!\",\n    subTitle: \"Thanks for signing up! We just sent you an email to verify and complete your registration.\",\n    extra: [React.createElement(Button, {\n      type: \"primary\",\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"resend-email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, \"Resend Email Verification\"))],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    key: \"div2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    key: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Register\"), React.createElement(Form, {\n    onFinish: onFinish,\n    initialValues: {\n      remember: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(Form.Item, {\n    name: \"name\",\n    rules: [{\n      required: true,\n      message: 'Please input your name!'\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(Input, {\n    prefix: React.createElement(UserOutlined, {\n      className: \"site-form-item-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }),\n    placeholder: \"Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })), React.createElement(Form.Item, {\n    name: \"email\",\n    rules: [{\n      required: true,\n      message: 'Please input your Username!'\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(Input, {\n    prefix: React.createElement(MailOutlined, {\n      className: \"site-form-item-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }),\n    type: \"email\",\n    placeholder: \"Email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  })), React.createElement(Form.Item, {\n    name: \"password\",\n    prefix: React.createElement(LockOutlined, {\n      className: \"site-form-item-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }),\n    rules: [{\n      required: true,\n      message: 'Please input your password!'\n    }, () => ({\n      validator(rule, value) {\n        const validation = /^(?=.*\\d)(?=.*[a-zA-Z])(?=.*[`~!@#$%^&*)(+=,./?><';:])(?!.*[\"_]).{8,}$/;\n\n        if (!validation.test(value)) {\n          return Promise.resolve('Password must be at least 8 characters long and must contain at least 1 alphabet, 1 integer and 1 special character');\n        }\n\n        return Promise.reject();\n      }\n\n    })],\n    hasFeedback: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(Input.Password, {\n    prefix: React.createElement(LockOutlined, {\n      className: \"site-form-item-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }),\n    placeholder: \"Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  })), React.createElement(Form.Item, {\n    name: \"confirm\",\n    dependencies: ['password'],\n    hasFeedback: true,\n    rules: [{\n      required: true,\n      message: 'Please confirm your password!'\n    }, ({\n      getFieldValue\n    }) => ({\n      validator(rule, value) {\n        if (!value || getFieldValue('password') === value) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject(new Error('The two passwords that you entered do not match!'));\n      }\n\n    })],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Input.Password, {\n    prefix: React.createElement(LockOutlined, {\n      className: \"site-form-item-icon\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }),\n    placeholder: \"Confirm Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  })), React.createElement(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/user/forgot-password\",\n    style: {\n      float: 'right'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, \"Forgot password\")), React.createElement(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"primary\",\n    loading: isRegistering,\n    disabled: isRegistering,\n    htmlType: \"submit\",\n    className: \"login-form-button\",\n    style: {\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, isRegistering ? 'Registering Account...' : 'Register'), \"Or\", ' ', React.createElement(Link, {\n    to: \"/user/login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"Login\")))))];\n};\n\nRegister.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  isRegistering: PropTypes.bool.isRequired,\n  isRegisterSuccess: PropTypes.bool.isRequired\n};\nRegister.defaultProps = {};\nRegister.styles = {};\nexport default Register;","map":{"version":3,"sources":["/home/honey/Desktop/Frontend/ManagementPortal-FE/src/views/auth/views/Register.js"],"names":["React","PropTypes","Form","Input","Button","Result","Link","UserOutlined","MailOutlined","LockOutlined","Register","handleSubmit","isRegistering","isRegisterSuccess","onFinish","values","width","remember","required","message","validator","rule","value","validation","test","Promise","resolve","reject","getFieldValue","Error","float","propTypes","func","isRequired","bool","defaultProps","styles"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Form, Input, Button, Result,\n} from 'antd';\nimport { Link } from 'react-router-dom';\nimport {\n  UserOutlined,\n  MailOutlined,\n  LockOutlined,\n} from '@ant-design/icons';\n\nconst Register = ({ handleSubmit, isRegistering, isRegisterSuccess }) => {\n  const onFinish = (values) => {\n    handleSubmit(values);\n  };\n\n  return [\n    <div key=\"div1\">\n      {isRegisterSuccess\n        ? (\n          <Result\n            status=\"success\"\n            title=\"Welcome!\"\n            subTitle=\"Thanks for signing up! We just sent you an email to verify and complete your registration.\"\n            extra={[\n              <Button type=\"primary\" style={{ width: '100%' }}>\n                <Link to=\"resend-email\">Resend Email Verification</Link>\n              </Button>,\n            ]}\n          />\n        )\n        : (\n          <div key=\"div2\">\n            <h2 key={1}>Register</h2>\n            <Form\n              onFinish={onFinish}\n              initialValues={{ remember: true }}\n            >\n              <Form.Item\n                name=\"name\"\n                rules={[{\n                  required: true,\n                  message: 'Please input your name!',\n                }]}\n              >\n                <Input\n                  prefix={<UserOutlined className=\"site-form-item-icon\" />}\n                  placeholder=\"Name\"\n                />\n              </Form.Item>\n              <Form.Item\n                name=\"email\"\n                rules={[{\n                  required: true,\n                  message: 'Please input your Username!',\n                }]}\n              >\n                <Input\n                  prefix={<MailOutlined className=\"site-form-item-icon\" />}\n                  type=\"email\"\n                  placeholder=\"Email\"\n                />\n              </Form.Item>\n              <Form.Item\n                name=\"password\"\n                prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                rules={[\n                  {\n                    required: true,\n                    message: 'Please input your password!',\n                  },\n                  () => ({\n                    validator(rule, value) {\n                      const validation = /^(?=.*\\d)(?=.*[a-zA-Z])(?=.*[`~!@#$%^&*)(+=,./?><';:])(?!.*[\"_]).{8,}$/;\n                      if (!validation.test(value)) {\n                        return Promise.resolve('Password must be at least 8 characters long and must contain at least 1 alphabet, 1 integer and 1 special character');\n                      }\n                      return Promise.reject();\n                    },\n                  }),\n                ]}\n                hasFeedback\n              >\n                <Input.Password\n                  prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                  placeholder=\"Password\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"confirm\"\n                dependencies={['password']}\n                hasFeedback\n                rules={[\n                  {\n                    required: true,\n                    message: 'Please confirm your password!',\n                  },\n                  ({ getFieldValue }) => ({\n                    validator(rule, value) {\n                      if (!value || getFieldValue('password') === value) {\n                        return Promise.resolve();\n                      }\n                      return Promise.reject(new Error('The two passwords that you entered do not match!'));\n                    },\n                  }),\n                ]}\n              >\n                <Input.Password\n                  prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                  placeholder=\"Confirm Password\"\n                />\n              </Form.Item>\n              <Form.Item>\n                <Link\n                  to=\"/user/forgot-password\"\n                  style={{ float: 'right' }}\n                >\n                  Forgot password\n                </Link>\n              </Form.Item>\n\n              <Form.Item>\n                <Button\n                  type=\"primary\"\n                  loading={isRegistering}\n                  disabled={isRegistering}\n                  htmlType=\"submit\"\n                  className=\"login-form-button\"\n                  style={{ width: '100%' }}\n                >\n                  {isRegistering ? 'Registering Account...' : 'Register'}\n                </Button>\n                Or\n                {' '}\n                <Link to=\"/user/login\">Login</Link>\n              </Form.Item>\n            </Form>\n          </div>\n        )}\n    </div>,\n  ];\n};\n\nRegister.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n  isRegistering: PropTypes.bool.isRequired,\n  isRegisterSuccess: PropTypes.bool.isRequired,\n};\n\nRegister.defaultProps = {};\n\nRegister.styles = {};\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}