{"ast":null,"code":"import request from '../../common/request';\nimport { HTTP_STATUS } from '../../common/constants';\nimport { openNotification } from '../../components/Notification';\nimport { requestEmployeeCreation, EmployeeCreationSuccess, EmployeeCreationFailure, requestFetchingEmployees, EmployeeFetchingSuccess, EmployeeFetchingFailure, requestEmployeeDeletion, EmployeeDeletionSuccess, EmployeeDeletionFailure, requestSingleEmployee, SingleEmployeeSuccess, SingleEmployeeFailure, requestUpdateEmployee, EmployeeUpdateSuccess, EmployeeUpdateFailure } from './dashboard.actions';\nexport const createEmployee = (payload, file) => {\n  console.log('from test', test);\n  console.log('from paylaod', payload);\n  console.log('from paylaod', payload.name);\n  const form = new FormData();\n  form.append('file', file);\n  form.append('name', payload.name);\n  form.append('email', payload.email);\n  form.append('age', payload.age);\n  form.append('gender', payload.gender);\n  form.append('department', payload.department);\n  form.append('designation', payload.designation);\n  form.append('address', payload.address);\n  return async dispatch => {\n    dispatch(requestEmployeeCreation());\n\n    try {\n      const res = await request.post('/v1/employee/create', form);\n      dispatch(EmployeeCreationSuccess());\n\n      if (res.status === HTTP_STATUS.CREATED) {\n        openNotification({\n          type: 'success',\n          title: 'Employee Created',\n          description: 'Employee Successfully Registered'\n        });\n      }\n\n      return res;\n    } catch (err) {\n      dispatch(EmployeeCreationFailure());\n\n      if (err.response.status === HTTP_STATUS.UNAUTHORIZED) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Invalid Login credentials!'\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request'\n        });\n      }\n\n      return null;\n    }\n  };\n};\nexport const getAllEmployees = () => {\n  return async dispatch => {\n    dispatch(requestFetchingEmployees());\n\n    try {\n      const res = await request.get('/v1/employee/');\n      dispatch(EmployeeFetchingSuccess(res.data || {}));\n      return res;\n    } catch (err) {\n      dispatch(EmployeeFetchingFailure(err));\n\n      if (err.response.status === HTTP_STATUS.UNAUTHORIZED) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Invalid Login credentials!'\n        });\n      } else if (err.response.status === HTTP_STATUS.NOT_FOUND) {\n        openNotification({\n          type: 'error',\n          title: 'Not Found',\n          description: 'Resource Not Found!'\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request'\n        });\n      }\n\n      return null;\n    }\n  };\n};\nexport const deleteEmployee = id => {\n  return async dispatch => {\n    dispatch(requestEmployeeDeletion());\n\n    try {\n      const res = await request.delete(`/v1/employee/${id}`);\n      dispatch(EmployeeDeletionSuccess());\n\n      if (res.status === 200) {\n        openNotification({\n          type: 'success',\n          title: 'Employee Deleted',\n          description: 'Employee Successfully Deleted'\n        });\n      }\n\n      return res;\n    } catch (err) {\n      dispatch(EmployeeDeletionFailure);\n\n      if (err.response.status === HTTP_STATUS.UNAUTHORIZED) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Invalid Login credentials!'\n        });\n      } else if (err.response.status === HTTP_STATUS.NOT_FOUND) {\n        openNotification({\n          type: 'error',\n          title: 'Not Found',\n          description: 'Resource Not Found!'\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request'\n        });\n      }\n\n      return null;\n    }\n  };\n};\nexport const getSingleEmployee = id => {\n  return async dispatch => {\n    dispatch(requestSingleEmployee());\n\n    try {\n      const res = await request.get(`/v1/employee/${id}`);\n      dispatch(SingleEmployeeSuccess(res.data || {}));\n      return res;\n    } catch (err) {\n      dispatch(SingleEmployeeFailure(err));\n\n      if (err.response.status === HTTP_STATUS.UNAUTHORIZED) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Invalid Login credentials!'\n        });\n      } else if (err.response.status === HTTP_STATUS.NOT_FOUND) {\n        openNotification({\n          type: 'error',\n          title: 'Not Found',\n          description: 'Resource Not Found!'\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request'\n        });\n      }\n\n      return null;\n    }\n  };\n};\nexport const UpdateSingleEmployee = (id, payload) => {\n  return async dispatch => {\n    dispatch(requestUpdateEmployee());\n\n    try {\n      const res = await request.put(`/v1/employee/${id}`, payload);\n      dispatch(EmployeeUpdateSuccess());\n\n      if (res.status === 200) {\n        openNotification({\n          type: 'success',\n          title: 'Employee Updated',\n          description: 'Employee Successfully Updated'\n        });\n      }\n\n      return res;\n    } catch (err) {\n      dispatch(EmployeeUpdateFailure());\n\n      if (err.response.status === HTTP_STATUS.UNAUTHORIZED) {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Invalid Login credentials!'\n        });\n      } else if (err.response.status === HTTP_STATUS.NOT_FOUND) {\n        openNotification({\n          type: 'error',\n          title: 'Not Found',\n          description: 'Resource Not Found!'\n        });\n      } else {\n        openNotification({\n          type: 'error',\n          title: 'User Login',\n          description: 'Some thing went wrong while making the request'\n        });\n      }\n\n      return null;\n    }\n  };\n};","map":{"version":3,"sources":["/home/honey/Desktop/Frontend/ManagementPortal-FE/src/views/dashboard/dashboard.api.js"],"names":["request","HTTP_STATUS","openNotification","requestEmployeeCreation","EmployeeCreationSuccess","EmployeeCreationFailure","requestFetchingEmployees","EmployeeFetchingSuccess","EmployeeFetchingFailure","requestEmployeeDeletion","EmployeeDeletionSuccess","EmployeeDeletionFailure","requestSingleEmployee","SingleEmployeeSuccess","SingleEmployeeFailure","requestUpdateEmployee","EmployeeUpdateSuccess","EmployeeUpdateFailure","createEmployee","payload","file","console","log","test","name","form","FormData","append","email","age","gender","department","designation","address","dispatch","res","post","status","CREATED","type","title","description","err","response","UNAUTHORIZED","getAllEmployees","get","data","NOT_FOUND","deleteEmployee","id","delete","getSingleEmployee","UpdateSingleEmployee","put"],"mappings":"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","sourcesContent":["import request from '../../common/request';\nimport { HTTP_STATUS } from '../../common/constants';\nimport { openNotification } from '../../components/Notification';\n\nimport {\n    requestEmployeeCreation,\n    EmployeeCreationSuccess,\n    EmployeeCreationFailure,\n\n    requestFetchingEmployees,\n    EmployeeFetchingSuccess,\n    EmployeeFetchingFailure,\n\n    requestEmployeeDeletion,\n    EmployeeDeletionSuccess,\n    EmployeeDeletionFailure,\n\n    requestSingleEmployee,\n    SingleEmployeeSuccess,\n    SingleEmployeeFailure,\n\n    requestUpdateEmployee,\n    EmployeeUpdateSuccess,\n    EmployeeUpdateFailure,\n\n} from './dashboard.actions'\n\n\nexport const createEmployee = (payload, file) => {\n    console.log('from test', test)\n    console.log('from paylaod', payload)\n    console.log('from paylaod', payload.name)\n    const form = new FormData();\n    form.append('file', file)\n    form.append('name', payload.name)\n    form.append('email', payload.email)\n    form.append('age', payload.age)\n    form.append('gender', payload.gender)\n    form.append('department', payload.department)\n    form.append('designation', payload.designation)\n    form.append('address', payload.address)\n    return async (dispatch) => {\n        dispatch(requestEmployeeCreation());\n\n        try {\n            const res = await request.post('/v1/employee/create', form);\n            dispatch(EmployeeCreationSuccess());\n            if (res.status === HTTP_STATUS.CREATED){\n                openNotification({\n                    type: 'success',\n                    title: 'Employee Created',\n                    description: 'Employee Successfully Registered',\n                });\n            }\n            return res;\n        } catch (err) {\n            dispatch(EmployeeCreationFailure());\n            if (err.response.status === HTTP_STATUS.UNAUTHORIZED) {\n                openNotification({\n                    type: 'error',\n                    title: 'User Login',\n                    description: 'Invalid Login credentials!',\n                });\n            } else {\n                openNotification({\n                    type: 'error',\n                    title: 'User Login',\n                    description: 'Some thing went wrong while making the request',\n                });\n            }\n            return null;\n        }\n    };\n};\n\nexport const getAllEmployees = () => {\n    return async (dispatch) => {\n        dispatch(requestFetchingEmployees());\n        try {\n            const res = await request.get('/v1/employee/');\n            dispatch(EmployeeFetchingSuccess(res.data || {}));\n            return res;\n        } catch (err) {\n            dispatch(EmployeeFetchingFailure(err));\n            if (err.response.status ===  HTTP_STATUS.UNAUTHORIZED ) {\n                openNotification({\n                    type: 'error',\n                    title: 'User Login',\n                    description: 'Invalid Login credentials!',\n                });\n            } else if (err.response.status === HTTP_STATUS.NOT_FOUND) {\n                openNotification({\n                    type: 'error',\n                    title: 'Not Found',\n                    description: 'Resource Not Found!',\n                });\n            } else {\n                openNotification({\n                    type: 'error',\n                    title: 'User Login',\n                    description: 'Some thing went wrong while making the request',\n                });\n            }\n            return null;\n        }\n    }\n}\n\n\nexport const deleteEmployee = (id) => {\n    return async (dispatch) => {\n        dispatch(requestEmployeeDeletion());\n        try {\n            const res = await request.delete(`/v1/employee/${id}`);\n            dispatch(EmployeeDeletionSuccess());\n            if (res.status === 200){\n                openNotification({\n                    type: 'success',\n                    title: 'Employee Deleted',\n                    description: 'Employee Successfully Deleted',\n                });\n            }\n            return res;\n        } catch (err) {\n            dispatch(EmployeeDeletionFailure);\n            if (err.response.status ===  HTTP_STATUS.UNAUTHORIZED ) {\n                openNotification({\n                    type: 'error',\n                    title: 'User Login',\n                    description: 'Invalid Login credentials!',\n                });\n            } else if (err.response.status === HTTP_STATUS.NOT_FOUND) {\n                openNotification({\n                    type: 'error',\n                    title: 'Not Found',\n                    description: 'Resource Not Found!',\n                });\n            } else {\n                openNotification({\n                    type: 'error',\n                    title: 'User Login',\n                    description: 'Some thing went wrong while making the request',\n                });\n            }\n            return null;\n        }\n    }\n}\n\nexport const getSingleEmployee = (id) => {\n    return async (dispatch) => {\n        dispatch(requestSingleEmployee());\n        try {\n            const res = await request.get(`/v1/employee/${id}`);\n            dispatch(SingleEmployeeSuccess(res.data || {}));\n            return res;\n        } catch (err) {\n            dispatch(SingleEmployeeFailure(err));\n            if (err.response.status ===  HTTP_STATUS.UNAUTHORIZED ) {\n                openNotification({\n                    type: 'error',\n                    title: 'User Login',\n                    description: 'Invalid Login credentials!',\n                });\n            } else if (err.response.status === HTTP_STATUS.NOT_FOUND) {\n                openNotification({\n                    type: 'error',\n                    title: 'Not Found',\n                    description: 'Resource Not Found!',\n                });\n            } else {\n                openNotification({\n                    type: 'error',\n                    title: 'User Login',\n                    description: 'Some thing went wrong while making the request',\n                });\n            }\n            return null;\n        }\n    }\n}\n\nexport const UpdateSingleEmployee = (id, payload) => {\n    return async (dispatch) => {\n        dispatch(requestUpdateEmployee());\n        try {\n            const res = await request.put(`/v1/employee/${id}`, payload);\n            dispatch(EmployeeUpdateSuccess());\n            if (res.status === 200){\n                openNotification({\n                    type: 'success',\n                    title: 'Employee Updated',\n                    description: 'Employee Successfully Updated',\n                });\n            }\n            return res;\n        } catch (err) {\n            dispatch(EmployeeUpdateFailure());\n            if (err.response.status ===  HTTP_STATUS.UNAUTHORIZED ) {\n                openNotification({\n                    type: 'error',\n                    title: 'User Login',\n                    description: 'Invalid Login credentials!',\n                });\n            } else if (err.response.status === HTTP_STATUS.NOT_FOUND) {\n                openNotification({\n                    type: 'error',\n                    title: 'Not Found',\n                    description: 'Resource Not Found!',\n                });\n            } else {\n                openNotification({\n                    type: 'error',\n                    title: 'User Login',\n                    description: 'Some thing went wrong while making the request',\n                });\n            }\n            return null;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}