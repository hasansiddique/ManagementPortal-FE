{"ast":null,"code":"import { Map } from 'immutable';\nimport { createReducer } from 'redux-act';\nimport { requestUserLogin, userLoginSuccess, userLoginFailure, requestUserLogout, userLogoutSuccess, userLogoutFailure, requestUserRegister, registerUserSuccess, registerUserFailure, requestVerifyUserEmail, verifyUserEmailSuccess, verifyUserEmailFailure, requestUserPasswordReset, userPasswordResetSuccess, userPasswordResetFailure, requestResendUserVerification, resendUserVerificationSuccess, resendUserVerificationFailure, requestUserPasswordUpdate, userPasswordUpdateSuccess, userPasswordUpdateFailure } from './auth.actions';\nimport { FAILURE, FETCHING, SUCCESS, EMAIL_VERIFIED, EMAIL_VERIFYING, EMAIL_VERIFICATION_CONFLICT } from '../../common/constants';\nconst defaultState = Map({\n  user: null,\n  error: null,\n  isLoggingIn: false,\n  requestingLogin: '',\n  isLoggingOut: false,\n  isLoggedOut: false,\n  isEmailVerified: '',\n  isRegistering: false,\n  isAuthenticated: false,\n  isRegisterSuccess: false,\n  isUpdatingAccount: false,\n  isUpdatingPassword: false,\n  isUpdatedPassword: false\n});\nconst reducer = createReducer({\n  [requestUserLogin]: state => {\n    return state.set('user', null).set('error', null).set('isAuthenticated', false).set('requestingLogin', FETCHING).set('isLoggingIn', true);\n  },\n  [userLoginSuccess]: (state, action) => {\n    return state.set('user', action.user).set('error', null).set('isAuthenticated', true).set('requestingLogin', SUCCESS).set('isLoggingIn', false);\n  },\n  [userLoginFailure]: (state, action) => {\n    return state.set('user', null).set('error', action.err).set('isAuthenticated', false).set('requestingLogin', FAILURE).set('isLoggingIn', false);\n  },\n  [requestUserLogout]: state => {\n    return state.set('isAuthenticated', false).set('isLoggingOut', true).set('isLoggedOut', false);\n  },\n  [userLogoutSuccess]: state => {\n    return state.set('isAuthenticated', false).set('isLoggingOut', false).set('isLoggedOut', true);\n  },\n  [userLogoutFailure]: state => {\n    return state.set('isAuthenticated', false).set('isLoggingOut', false).set('isLoggedOut', false);\n  },\n  [requestUserRegister]: state => {\n    return state.set('isRegistering', true).set('isRegisterSuccess', false);\n  },\n  [registerUserSuccess]: state => {\n    return state.set('isRegistering', false).set('isRegisterSuccess', true);\n  },\n  [registerUserFailure]: state => {\n    return state.set('isRegistering', false).set('isRegisterSuccess', false);\n  },\n  [requestVerifyUserEmail]: state => {\n    return state.set('isEmailVerified', EMAIL_VERIFYING);\n  },\n  [verifyUserEmailSuccess]: state => {\n    return state.set('isEmailVerified', EMAIL_VERIFIED);\n  },\n  [verifyUserEmailFailure]: state => {\n    return state.set('isEmailVerified', EMAIL_VERIFICATION_CONFLICT);\n  },\n  [requestUserPasswordReset]: state => {\n    return state.set('resetMsg', '').set('isLoggingIn', true);\n  },\n  [userPasswordResetSuccess]: state => {\n    return state.set('resetMsg', SUCCESS).set('isLoggingIn', false);\n  },\n  [userPasswordResetFailure]: state => {\n    return state.set('resetMsg', FAILURE).set('isLoggingIn', false);\n  },\n  [requestResendUserVerification]: state => {\n    return state.set('isUpdatingAccount', true);\n  },\n  [resendUserVerificationSuccess]: state => {\n    return state.set('isUpdatingAccount', false);\n  },\n  [resendUserVerificationFailure]: state => {\n    return state.set('isUpdatingAccount', false);\n  },\n  [requestUserPasswordUpdate]: state => {\n    return state.set('isUpdatingPassword', false).set('isUpdatedPassword', false);\n  },\n  [userPasswordUpdateSuccess]: state => {\n    return state.set('isUpdatingPassword', true).set('isUpdatedPassword', true);\n  },\n  [userPasswordUpdateFailure]: state => {\n    return state.set('isUpdatingPassword', false).set('isUpdatedPassword', false);\n  }\n}, defaultState);\nexport default reducer;","map":{"version":3,"sources":["/home/honey/Desktop/Frontend/ManagementPortal-FE/src/views/auth/auth.reducer.js"],"names":["Map","createReducer","requestUserLogin","userLoginSuccess","userLoginFailure","requestUserLogout","userLogoutSuccess","userLogoutFailure","requestUserRegister","registerUserSuccess","registerUserFailure","requestVerifyUserEmail","verifyUserEmailSuccess","verifyUserEmailFailure","requestUserPasswordReset","userPasswordResetSuccess","userPasswordResetFailure","requestResendUserVerification","resendUserVerificationSuccess","resendUserVerificationFailure","requestUserPasswordUpdate","userPasswordUpdateSuccess","userPasswordUpdateFailure","FAILURE","FETCHING","SUCCESS","EMAIL_VERIFIED","EMAIL_VERIFYING","EMAIL_VERIFICATION_CONFLICT","defaultState","user","error","isLoggingIn","requestingLogin","isLoggingOut","isLoggedOut","isEmailVerified","isRegistering","isAuthenticated","isRegisterSuccess","isUpdatingAccount","isUpdatingPassword","isUpdatedPassword","reducer","state","set","action","err"],"mappings":"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","sourcesContent":["import { Map } from 'immutable';\nimport { createReducer } from 'redux-act';\nimport {\n  requestUserLogin,\n  userLoginSuccess,\n  userLoginFailure,\n\n  requestUserLogout,\n  userLogoutSuccess,\n  userLogoutFailure,\n\n  requestUserRegister,\n  registerUserSuccess,\n  registerUserFailure,\n\n  requestVerifyUserEmail,\n  verifyUserEmailSuccess,\n  verifyUserEmailFailure,\n\n  requestUserPasswordReset,\n  userPasswordResetSuccess,\n  userPasswordResetFailure,\n\n  requestResendUserVerification,\n  resendUserVerificationSuccess,\n  resendUserVerificationFailure,\n\n    requestUserPasswordUpdate,\n    userPasswordUpdateSuccess,\n    userPasswordUpdateFailure,\n} from './auth.actions';\nimport {\n  FAILURE,\n  FETCHING,\n  SUCCESS,\n  EMAIL_VERIFIED,\n  EMAIL_VERIFYING,\n  EMAIL_VERIFICATION_CONFLICT,\n} from '../../common/constants';\n\nconst defaultState = Map({\n  user: null,\n  error: null,\n  isLoggingIn: false,\n  requestingLogin: '',\n  isLoggingOut: false,\n  isLoggedOut: false,\n  isEmailVerified: '',\n  isRegistering: false,\n  isAuthenticated: false,\n  isRegisterSuccess: false,\n  isUpdatingAccount: false,\n  isUpdatingPassword: false,\n  isUpdatedPassword: false\n\n});\n\nconst reducer = createReducer({\n  [requestUserLogin]: (state) => {\n    return state\n      .set('user', null)\n      .set('error', null)\n      .set('isAuthenticated', false)\n      .set('requestingLogin', FETCHING)\n      .set('isLoggingIn', true);\n  },\n  [userLoginSuccess]: (state, action) => {\n    return state\n      .set('user', action.user)\n      .set('error', null)\n      .set('isAuthenticated', true)\n      .set('requestingLogin', SUCCESS)\n      .set('isLoggingIn', false);\n  },\n  [userLoginFailure]: (state, action) => {\n    return state\n      .set('user', null)\n      .set('error', action.err)\n      .set('isAuthenticated', false)\n      .set('requestingLogin', FAILURE)\n      .set('isLoggingIn', false);\n  },\n  [requestUserLogout]: (state) => {\n    return state\n      .set('isAuthenticated', false)\n      .set('isLoggingOut', true)\n      .set('isLoggedOut', false);\n  },\n  [userLogoutSuccess]: (state) => {\n    return state\n      .set('isAuthenticated', false)\n      .set('isLoggingOut', false)\n      .set('isLoggedOut', true);\n  },\n  [userLogoutFailure]: (state) => {\n    return state\n      .set('isAuthenticated', false)\n      .set('isLoggingOut', false)\n      .set('isLoggedOut', false);\n  },\n\n  [requestUserRegister]: (state) => {\n    return state\n      .set('isRegistering', true)\n      .set('isRegisterSuccess', false);\n  },\n  [registerUserSuccess]: (state) => {\n    return state\n      .set('isRegistering', false)\n      .set('isRegisterSuccess', true);\n  },\n  [registerUserFailure]: (state) => {\n    return state\n      .set('isRegistering', false)\n      .set('isRegisterSuccess', false);\n  },\n\n  [requestVerifyUserEmail]: (state) => {\n    return state\n      .set('isEmailVerified', EMAIL_VERIFYING);\n  },\n  [verifyUserEmailSuccess]: (state) => {\n    return state\n      .set('isEmailVerified', EMAIL_VERIFIED);\n  },\n  [verifyUserEmailFailure]: (state) => {\n    return state\n      .set('isEmailVerified', EMAIL_VERIFICATION_CONFLICT);\n  },\n\n  [requestUserPasswordReset]: (state) => {\n    return state\n      .set('resetMsg', '')\n      .set('isLoggingIn', true);\n  },\n  [userPasswordResetSuccess]: (state) => {\n    return state\n      .set('resetMsg', SUCCESS)\n      .set('isLoggingIn', false);\n  },\n  [userPasswordResetFailure]: (state) => {\n    return state\n      .set('resetMsg', FAILURE)\n      .set('isLoggingIn', false);\n  },\n\n  [requestResendUserVerification]: (state) => {\n    return state\n      .set('isUpdatingAccount', true);\n  },\n  [resendUserVerificationSuccess]: (state) => {\n    return state\n      .set('isUpdatingAccount', false);\n  },\n  [resendUserVerificationFailure]: (state) => {\n    return state\n      .set('isUpdatingAccount', false);\n  },\n  [requestUserPasswordUpdate]: (state) => {\n    return state\n        .set('isUpdatingPassword', false)\n        .set('isUpdatedPassword', false)\n  },\n  [userPasswordUpdateSuccess]: (state) => {\n    return state\n        .set('isUpdatingPassword', true)\n        .set('isUpdatedPassword', true)\n  },\n  [userPasswordUpdateFailure]: (state) => {\n    return state\n        .set('isUpdatingPassword', false)\n        .set('isUpdatedPassword', false)\n  },\n}, defaultState);\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}