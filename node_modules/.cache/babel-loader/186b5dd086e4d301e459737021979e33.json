{"ast":null,"code":"import { Map } from 'immutable';\nimport { createReducer } from 'redux-act';\nimport { requestEmployeeCreation, EmployeeCreationSuccess, EmployeeCreationFailure, requestFetchingEmployees, EmployeeFetchingSuccess, EmployeeFetchingFailure } from './dashboard.actions';\nimport { CREATING, CREATED, FAILURE, FETCHING, FETCHED } from '../../common/constants';\nconst defaultState = Map({\n  employee: [],\n  error: null,\n  isFetching: '',\n  isFetched: false,\n  isCreating: '',\n  isCreatingSuccess: false\n});\nconst reducer = createReducer({\n  [requestEmployeeCreation]: state => {\n    return state.set('isCreating', CREATING).set('isCreatingSuccess', false);\n  },\n  [EmployeeCreationSuccess]: state => {\n    return state.set('isCreating', CREATED).set('isCreatingSuccess', true);\n  },\n  [EmployeeCreationFailure]: state => {\n    return state.set('isCreating', FAILURE).set('isCreatingSuccess', false);\n  },\n  [requestFetchingEmployees]: state => {\n    return state.set('isFetching', FETCHING).set('employee', []).set('error', null).set('isFetched', false);\n  },\n  [EmployeeFetchingSuccess]: (state, action) => {\n    return state.set('isFetching', FETCHED).set('employee', action.employee).set('error', null).set('isFetched', true);\n  },\n  [EmployeeFetchingFailure]: (state, action) => {\n    return state.set('isFetching', FAILURE).set('employee', []).set('error', action.err).set('isFetched', false);\n  }\n}, defaultState);\nexport default reducer;","map":{"version":3,"sources":["/home/honey/Desktop/Frontend/ManagementPortal-FE/src/views/dashboard/dashboard.reducer.js"],"names":["Map","createReducer","requestEmployeeCreation","EmployeeCreationSuccess","EmployeeCreationFailure","requestFetchingEmployees","EmployeeFetchingSuccess","EmployeeFetchingFailure","CREATING","CREATED","FAILURE","FETCHING","FETCHED","defaultState","employee","error","isFetching","isFetched","isCreating","isCreatingSuccess","reducer","state","set","action","err"],"mappings":"AAAA,SAASA,GAAT,QAAoB,WAApB;AACA,SAASC,aAAT,QAA8B,WAA9B;AAEA,SACIC,uBADJ,EAEIC,uBAFJ,EAGIC,uBAHJ,EAKIC,wBALJ,EAMIC,uBANJ,EAOIC,uBAPJ,QAQO,qBARP;AAUA,SACIC,QADJ,EAEIC,OAFJ,EAGIC,OAHJ,EAIIC,QAJJ,EAKIC,OALJ,QAMO,wBANP;AAQA,MAAMC,YAAY,GAAGb,GAAG,CAAC;AACrBc,EAAAA,QAAQ,EAAE,EADW;AAErBC,EAAAA,KAAK,EAAE,IAFc;AAGrBC,EAAAA,UAAU,EAAE,EAHS;AAIrBC,EAAAA,SAAS,EAAE,KAJU;AAKrBC,EAAAA,UAAU,EAAE,EALS;AAMrBC,EAAAA,iBAAiB,EAAE;AANE,CAAD,CAAxB;AASA,MAAMC,OAAO,GAAGnB,aAAa,CAAC;AAC1B,GAACC,uBAAD,GAA4BmB,KAAD,IAAW;AAClC,WAAOA,KAAK,CACPC,GADE,CACE,YADF,EACgBd,QADhB,EAEFc,GAFE,CAEE,mBAFF,EAEuB,KAFvB,CAAP;AAGH,GALyB;AAM1B,GAACnB,uBAAD,GAA4BkB,KAAD,IAAW;AAClC,WAAOA,KAAK,CACPC,GADE,CACE,YADF,EACgBb,OADhB,EAEFa,GAFE,CAEE,mBAFF,EAEuB,IAFvB,CAAP;AAGH,GAVyB;AAW1B,GAAClB,uBAAD,GAA4BiB,KAAD,IAAW;AAClC,WAAOA,KAAK,CACPC,GADE,CACE,YADF,EACgBZ,OADhB,EAEFY,GAFE,CAEE,mBAFF,EAEuB,KAFvB,CAAP;AAGH,GAfyB;AAgB1B,GAACjB,wBAAD,GAA6BgB,KAAD,IAAW;AACnC,WAAOA,KAAK,CACPC,GADE,CACE,YADF,EACgBX,QADhB,EAEFW,GAFE,CAEE,UAFF,EAEc,EAFd,EAGFA,GAHE,CAGE,OAHF,EAGW,IAHX,EAIFA,GAJE,CAIE,WAJF,EAIe,KAJf,CAAP;AAKH,GAtByB;AAuB1B,GAAChB,uBAAD,GAA2B,CAACe,KAAD,EAAQE,MAAR,KAAmB;AAC1C,WAAOF,KAAK,CACPC,GADE,CACE,YADF,EACgBV,OADhB,EAEFU,GAFE,CAEE,UAFF,EAEcC,MAAM,CAACT,QAFrB,EAGFQ,GAHE,CAGE,OAHF,EAGW,IAHX,EAIFA,GAJE,CAIE,WAJF,EAIe,IAJf,CAAP;AAKH,GA7ByB;AA8B1B,GAACf,uBAAD,GAA2B,CAACc,KAAD,EAAQE,MAAR,KAAmB;AAC1C,WAAOF,KAAK,CACPC,GADE,CACE,YADF,EACgBZ,OADhB,EAEFY,GAFE,CAEE,UAFF,EAEc,EAFd,EAGFA,GAHE,CAGE,OAHF,EAGWC,MAAM,CAACC,GAHlB,EAIFF,GAJE,CAIE,WAJF,EAIe,KAJf,CAAP;AAKH;AApCyB,CAAD,EAqC1BT,YArC0B,CAA7B;AAuCA,eAAeO,OAAf","sourcesContent":["import { Map } from 'immutable';\nimport { createReducer } from 'redux-act';\n\nimport {\n    requestEmployeeCreation,\n    EmployeeCreationSuccess,\n    EmployeeCreationFailure,\n\n    requestFetchingEmployees,\n    EmployeeFetchingSuccess,\n    EmployeeFetchingFailure,\n} from './dashboard.actions'\n\nimport {\n    CREATING,\n    CREATED,\n    FAILURE,\n    FETCHING,\n    FETCHED,\n} from '../../common/constants';\n\nconst defaultState = Map({\n    employee: [],\n    error: null,\n    isFetching: '',\n    isFetched: false,\n    isCreating: '',\n    isCreatingSuccess: false,\n});\n\nconst reducer = createReducer({\n    [requestEmployeeCreation]: (state) => {\n        return state\n            .set('isCreating', CREATING)\n            .set('isCreatingSuccess', false);\n    },\n    [EmployeeCreationSuccess]: (state) => {\n        return state\n            .set('isCreating', CREATED)\n            .set('isCreatingSuccess', true);\n    },\n    [EmployeeCreationFailure]: (state) => {\n        return state\n            .set('isCreating', FAILURE)\n            .set('isCreatingSuccess', false);\n    },\n    [requestFetchingEmployees]: (state) => {\n        return state\n            .set('isFetching', FETCHING)\n            .set('employee', [])\n            .set('error', null)\n            .set('isFetched', false)\n    },\n    [EmployeeFetchingSuccess]: (state, action) => {\n        return state\n            .set('isFetching', FETCHED)\n            .set('employee', action.employee)\n            .set('error', null)\n            .set('isFetched', true)\n    },\n    [EmployeeFetchingFailure]: (state, action) => {\n        return state\n            .set('isFetching', FAILURE)\n            .set('employee', [] )\n            .set('error', action.err)\n            .set('isFetched', false)\n    },\n}, defaultState);\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}