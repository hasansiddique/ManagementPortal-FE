{"ast":null,"code":"import axios from 'axios';\nimport { merge } from 'lodash';\nimport storage from '../storage';\nimport transformKeys from '../transformKeys';\n\nconst getHeaders = headers => {\n  const user = storage.get('user');\n  const defaultHeaders = {\n    Accept: 'application/vnd.cia.v1+json',\n    'Content-Type': 'application/vnd.cia.v1+json' || 'multipart/form-data'\n  };\n\n  if (user && user.token) {\n    merge(headers, {\n      Authorization: `Bearer ${user.token.accessToken}`\n    });\n  }\n\n  return merge({}, defaultHeaders, headers);\n};\n\nconst request = {\n  get: (url, headers = {}) => {\n    return axios({\n      method: 'GET',\n      url,\n      headers: getHeaders(headers),\n      transformResponse: axios.defaults.transformResponse.concat(data => transformKeys.toCamelCase(data))\n    });\n  },\n  post: (url, payload, headers = {}, transform = true) => {\n    return axios({\n      method: 'POST',\n      url,\n      data: transform ? transformKeys.toSnakeCase(payload) : payload.includes(),\n      headers: getHeaders(headers),\n      transformResponse: axios.defaults.transformResponse.concat(data => transformKeys.toCamelCase(data))\n    });\n  },\n  patch: (url, payload, headers = {}, transform = true) => {\n    return axios({\n      method: 'PATCH',\n      url,\n      data: transform ? transformKeys.toSnakeCase(payload) : payload,\n      headers: getHeaders(headers),\n      transformResponse: axios.defaults.transformResponse.concat(data => transformKeys.toCamelCase(data))\n    });\n  },\n  put: (url, payload, headers = {}, transform = true) => {\n    return axios({\n      method: 'PUT',\n      url,\n      data: transform ? transformKeys.toSnakeCase(payload) : payload,\n      headers: getHeaders(headers),\n      transformResponse: axios.defaults.transformResponse.concat(data => transformKeys.toCamelCase(data))\n    });\n  },\n  delete: (url, headers = {}) => {\n    return axios({\n      method: 'DELETE',\n      url,\n      headers: getHeaders(headers),\n      transformResponse: axios.defaults.transformResponse.concat(data => transformKeys.toCamelCase(data))\n    });\n  }\n};\nexport default request;","map":{"version":3,"sources":["/home/honey/Desktop/Frontend/ManagementPortal-FE/src/common/request/index.js"],"names":["axios","merge","storage","transformKeys","getHeaders","headers","user","get","defaultHeaders","Accept","token","Authorization","accessToken","request","url","method","transformResponse","defaults","concat","data","toCamelCase","post","payload","transform","toSnakeCase","includes","patch","put","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { merge } from 'lodash';\n\nimport storage from '../storage';\nimport transformKeys from '../transformKeys';\n\nconst getHeaders = (headers) => {\n  const user = storage.get('user');\n  const defaultHeaders = {\n    Accept: 'application/vnd.cia.v1+json',\n    'Content-Type': 'application/vnd.cia.v1+json' || 'multipart/form-data' ,\n  };\n\n  if (user && user.token) {\n    merge(headers, { Authorization: `Bearer ${user.token.accessToken}` });\n  }\n\n  return merge({}, defaultHeaders, headers);\n};\n\nconst request = {\n  get: (url, headers = {}) => {\n    return axios({\n      method: 'GET',\n      url,\n      headers: getHeaders(headers),\n      transformResponse: axios.defaults.transformResponse\n        .concat((data) => transformKeys.toCamelCase(data)),\n    });\n  },\n  post: (url, payload, headers = {}, transform = true) => {\n    return axios({\n      method: 'POST',\n      url,\n      data: transform ? transformKeys.toSnakeCase(payload) : payload.includes(),\n      headers: getHeaders(headers),\n      transformResponse: axios.defaults.transformResponse\n        .concat((data) => transformKeys.toCamelCase(data)),\n    });\n  },\n  patch: (url, payload, headers = {}, transform = true) => {\n    return axios({\n      method: 'PATCH',\n      url,\n      data: transform ? transformKeys.toSnakeCase(payload) : payload,\n      headers: getHeaders(headers),\n      transformResponse: axios.defaults.transformResponse\n        .concat((data) => transformKeys.toCamelCase(data)),\n    });\n  },\n  put: (url, payload, headers = {}, transform = true) => {\n    return axios({\n      method: 'PUT',\n      url,\n      data: transform ? transformKeys.toSnakeCase(payload) : payload,\n      headers: getHeaders(headers),\n      transformResponse: axios.defaults.transformResponse\n        .concat((data) => transformKeys.toCamelCase(data)),\n    });\n  },\n  delete: (url, headers = {}) => {\n    return axios({\n      method: 'DELETE',\n      url,\n      headers: getHeaders(headers),\n      transformResponse: axios.defaults.transformResponse\n        .concat((data) => transformKeys.toCamelCase(data)),\n    });\n  },\n};\n\nexport default request;\n"]},"metadata":{},"sourceType":"module"}