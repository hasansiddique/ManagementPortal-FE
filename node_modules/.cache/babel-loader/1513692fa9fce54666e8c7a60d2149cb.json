{"ast":null,"code":"var _jsxFileName = \"/home/honey/Desktop/Frontend/ManagementPortal-FE/src/views/layout/Layout.view.js\";\nimport { get } from 'lodash';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport React, { Fragment, useEffect } from 'react';\nimport { withRouter, Redirect } from 'react-router-dom';\nimport AppRoutes from '../../AppRoutes';\nimport { getUser, refreshToken } from '../auth/auth.api';\nimport storage from '../../common/storage';\nimport { AUTH_ROUTES, USER_STATE } from '../../common/constants';\n\nconst Layout = ({\n  history,\n  location,\n  getUserFromApi,\n  isAuthenticated,\n  refreshToken\n}) => {\n  const admin1 = get(storage.get('user'), 'user.typeOfId') === USER_STATE.ADMIN_FULL;\n  const admin2 = get(storage.get('user'), 'user.typeOfId') === USER_STATE.ADMIN_PARTIAL;\n  const employee = get(storage.get('user'), 'user.typeOfId') === USER_STATE.EMPLOYEE;\n  useEffect(() => {\n    if (isAuthenticated && location && location.pathname && admin1 || admin2) {\n      history.push(AUTH_ROUTES.includes(location.pathname) ? '/dashboard' : location.pathname);\n    } else if (isAuthenticated && employee && location && location.pathname) {\n      history.push(AUTH_ROUTES.includes(location.pathname) ? '/employee' : '/employee');\n    } else if (!isAuthenticated && get(storage.get('user'), 'token')) {\n      getUserFromApi();\n    }\n\n    let interval;\n\n    if (storage.get('user')) {\n      interval = setInterval(() => {\n        refreshToken();\n      }, 840000);\n    }\n\n    return () => clearInterval(interval); // eslint-disable-next-line\n  }, [getUserFromApi, isAuthenticated, history]); // working with refresh token later\n  // axios.interceptors.response.use(function (response) {\n  //   return response;\n  // }, function (error) {\n  //   if(error.status === 200) {\n  //     // do something when unauthorized\n  //     store.dispatch(test());\n  //   }\n  //   return Promise.reject(error);\n  // });\n\n  return [React.createElement(Fragment, {\n    key: \"redirect\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, isAuthenticated && admin && React.createElement(Redirect, {\n    to: AUTH_ROUTES.includes(location.pathname) ? '/dashboard' : location.pathname,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), \",\", isAuthenticated && employee && React.createElement(Redirect, {\n    to: AUTH_ROUTES.includes(location.pathname) ? '/employee' : '/employee',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    key: \"app\",\n    id: \"app-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(AppRoutes, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }))];\n};\n\nLayout.defaultProps = {\n  isAuthenticated: false\n};\nLayout.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  getUserFromApi: PropTypes.func,\n  history: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired,\n  refreshToken: PropTypes.func\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.getIn(['auth', 'isAuthenticated'])\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getUserFromApi: () => {\n    dispatch(getUser());\n  },\n  refreshToken: () => {\n    dispatch(refreshToken());\n  }\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Layout));","map":{"version":3,"sources":["/home/honey/Desktop/Frontend/ManagementPortal-FE/src/views/layout/Layout.view.js"],"names":["get","PropTypes","connect","React","Fragment","useEffect","withRouter","Redirect","AppRoutes","getUser","refreshToken","storage","AUTH_ROUTES","USER_STATE","Layout","history","location","getUserFromApi","isAuthenticated","admin1","ADMIN_FULL","admin2","ADMIN_PARTIAL","employee","EMPLOYEE","pathname","push","includes","interval","setInterval","clearInterval","admin","defaultProps","propTypes","bool","func","object","isRequired","mapStateToProps","state","getIn","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import { get } from 'lodash';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport React, { Fragment, useEffect } from 'react';\nimport { withRouter, Redirect } from 'react-router-dom';\n\nimport AppRoutes from '../../AppRoutes';\nimport { getUser, refreshToken } from '../auth/auth.api';\nimport storage from '../../common/storage';\nimport { AUTH_ROUTES, USER_STATE } from '../../common/constants';\n\nconst Layout = ({\n  history,\n  location,\n  getUserFromApi,\n  isAuthenticated,\n    refreshToken,\n}) => {\n\n  const admin1 = get(storage.get('user'), 'user.typeOfId') === USER_STATE.ADMIN_FULL;\n  const admin2 = get(storage.get('user'), 'user.typeOfId') === USER_STATE.ADMIN_PARTIAL;\n  const employee = get(storage.get('user'), 'user.typeOfId') === USER_STATE.EMPLOYEE ;\n\n  useEffect(() => {\n    if (isAuthenticated  && location && location.pathname && admin1 || admin2) {\n      history.push(\n        AUTH_ROUTES.includes(location.pathname)\n          ? '/dashboard'\n          : location.pathname,\n      );\n    } else if (isAuthenticated && employee && location && location.pathname) {\n      history.push(\n          AUTH_ROUTES.includes(location.pathname)\n              ? '/employee'\n              : '/employee',\n      );\n    }else if (!isAuthenticated && get(storage.get('user'), 'token')) {\n      getUserFromApi()\n    }\n    let interval;\n    if (storage.get('user')) {\n      interval = setInterval(() => {refreshToken()}, 840000);\n    }\n    return () => clearInterval(interval);\n    // eslint-disable-next-line\n  },[getUserFromApi, isAuthenticated, history]);\n\n  // working with refresh token later\n  // axios.interceptors.response.use(function (response) {\n  //   return response;\n  // }, function (error) {\n  //   if(error.status === 200) {\n  //     // do something when unauthorized\n  //     store.dispatch(test());\n  //   }\n  //   return Promise.reject(error);\n  // });\n\n  return [\n    <Fragment key=\"redirect\">\n      {isAuthenticated && admin && (\n        <Redirect\n          to={\n            AUTH_ROUTES.includes(location.pathname)\n              ? '/dashboard'\n              : location.pathname\n          }\n        />\n      )},\n      {isAuthenticated && employee && (\n          <Redirect\n              to={\n                AUTH_ROUTES.includes(location.pathname)\n                    ? '/employee'\n                    : '/employee'\n              }\n          />\n      )}\n    </Fragment>,\n    <div key=\"app\" id=\"app-wrapper\">\n      <AppRoutes />\n    </div>,\n  ];\n};\n\nLayout.defaultProps = {\n  isAuthenticated: false,\n};\n\nLayout.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  getUserFromApi: PropTypes.func,\n  history: PropTypes.object.isRequired,\n  location: PropTypes.object.isRequired,\n  refreshToken: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.getIn(['auth', 'isAuthenticated']),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getUserFromApi: () => {\n    dispatch(getUser());\n  },\n  refreshToken: () => {\n    dispatch(refreshToken());\n  },\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Layout));\n"]},"metadata":{},"sourceType":"module"}