{"ast":null,"code":"import { Map } from 'immutable';\nimport { createReducer } from 'redux-act';\nimport { requestEmployeeCreation, EmployeeCreationSuccess, EmployeeCreationFailure, requestFetchingEmployees, EmployeeFetchingSuccess, EmployeeFetchingFailure, requestEmployeeDeletion, EmployeeDeletionSuccess, EmployeeDeletionFailure, requestSingleEmployee, SingleEmployeeSuccess, SingleEmployeeFailure, requestUpdateEmployee, EmployeeUpdateSuccess, EmployeeUpdateFailure } from './dashboard.actions';\nimport { CREATING, CREATED, FAILURE, FETCHING, FETCHED, DELETED, DELETING } from '../../common/constants';\nconst defaultState = Map({\n  employee: [],\n  loading: true,\n  error: null,\n  isFetching: '',\n  isFetched: false,\n  isCreating: '',\n  isCreatingSuccess: false,\n  isDeleting: '',\n  isDeletingSuccess: false,\n  SingleEmployee: null,\n  isUpdating: '',\n  isUpdated: false\n});\nconst reducer = createReducer({\n  [requestEmployeeCreation]: state => {\n    return state.set('isCreating', CREATING).set('isCreatingSuccess', false);\n  },\n  [EmployeeCreationSuccess]: state => {\n    return state.set('isCreating', CREATED).set('isCreatingSuccess', true);\n  },\n  [EmployeeCreationFailure]: state => {\n    return state.set('isCreating', FAILURE).set('isCreatingSuccess', false);\n  },\n  [requestFetchingEmployees]: state => {\n    return state.set('isFetching', FETCHING).set('loading', true).set('employee', []).set('error', null).set('isFetched', false);\n  },\n  [EmployeeFetchingSuccess]: (state, action) => {\n    return state.set('isFetching', FETCHED).set('loading', false).set('employee', action.employee).set('error', null).set('isFetched', true);\n  },\n  [EmployeeFetchingFailure]: (state, action) => {\n    return state.set('isFetching', FAILURE).set('loading', false).set('employee', []).set('error', action.err).set('isFetched', false);\n  },\n  [requestEmployeeDeletion]: state => {\n    return state.set('isDeleting', DELETING).set('isDeletingSuccess', false);\n  },\n  [EmployeeDeletionSuccess]: state => {\n    return state.set('isDeleting', DELETED).set('isDeletingSuccess', true);\n  },\n  [EmployeeDeletionFailure]: state => {\n    return state.set('isDeleting', FAILURE).set('isDeletingSuccess', false);\n  },\n  [requestSingleEmployee]: state => {\n    return state.set('isFetching', FETCHING).set('loading', true).set('SingleEmployee', null).set('error', null).set('isFetched', false);\n  },\n  [SingleEmployeeSuccess]: (state, action) => {\n    return state.set('isFetching', FETCHED).set('loading', false).set('SingleEmployee', action.employee).set('error', null).set('isFetched', true);\n  },\n  [SingleEmployeeFailure]: (state, action) => {\n    return state.set('isFetching', FAILURE).set('loading', false).set('SingleEmployee', null).set('error', action.err).set('isFetched', false);\n  }\n}, defaultState);\nexport default reducer;","map":{"version":3,"sources":["/home/honey/Desktop/Frontend/ManagementPortal-FE/src/views/dashboard/dashboard.reducer.js"],"names":["Map","createReducer","requestEmployeeCreation","EmployeeCreationSuccess","EmployeeCreationFailure","requestFetchingEmployees","EmployeeFetchingSuccess","EmployeeFetchingFailure","requestEmployeeDeletion","EmployeeDeletionSuccess","EmployeeDeletionFailure","requestSingleEmployee","SingleEmployeeSuccess","SingleEmployeeFailure","requestUpdateEmployee","EmployeeUpdateSuccess","EmployeeUpdateFailure","CREATING","CREATED","FAILURE","FETCHING","FETCHED","DELETED","DELETING","defaultState","employee","loading","error","isFetching","isFetched","isCreating","isCreatingSuccess","isDeleting","isDeletingSuccess","SingleEmployee","isUpdating","isUpdated","reducer","state","set","action","err"],"mappings":"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","sourcesContent":["import { Map } from 'immutable';\nimport { createReducer } from 'redux-act';\n\nimport {\n    requestEmployeeCreation,\n    EmployeeCreationSuccess,\n    EmployeeCreationFailure,\n\n    requestFetchingEmployees,\n    EmployeeFetchingSuccess,\n    EmployeeFetchingFailure,\n\n    requestEmployeeDeletion,\n    EmployeeDeletionSuccess,\n    EmployeeDeletionFailure,\n\n    requestSingleEmployee,\n    SingleEmployeeSuccess,\n    SingleEmployeeFailure,\n\n    requestUpdateEmployee,\n    EmployeeUpdateSuccess,\n    EmployeeUpdateFailure,\n\n} from './dashboard.actions'\n\nimport {\n    CREATING,\n    CREATED,\n    FAILURE,\n    FETCHING,\n    FETCHED,\n    DELETED,\n    DELETING\n} from '../../common/constants';\n\nconst defaultState = Map({\n    employee: [],\n    loading: true,\n    error: null,\n    isFetching: '',\n    isFetched: false,\n    isCreating: '',\n    isCreatingSuccess: false,\n    isDeleting: '',\n    isDeletingSuccess: false,\n    SingleEmployee: null,\n    isUpdating: '',\n    isUpdated: false,\n\n});\n\nconst reducer = createReducer({\n    [requestEmployeeCreation]: (state) => {\n        return state\n            .set('isCreating', CREATING)\n            .set('isCreatingSuccess', false);\n    },\n    [EmployeeCreationSuccess]: (state) => {\n        return state\n            .set('isCreating', CREATED)\n            .set('isCreatingSuccess', true);\n    },\n    [EmployeeCreationFailure]: (state) => {\n        return state\n            .set('isCreating', FAILURE)\n            .set('isCreatingSuccess', false);\n    },\n    [requestFetchingEmployees]: (state) => {\n        return state\n            .set('isFetching', FETCHING)\n            .set('loading', true)\n            .set('employee', [])\n            .set('error', null)\n            .set('isFetched', false)\n    },\n    [EmployeeFetchingSuccess]: (state, action) => {\n        return state\n            .set('isFetching', FETCHED)\n            .set('loading', false)\n            .set('employee', action.employee)\n            .set('error', null)\n            .set('isFetched', true)\n    },\n    [EmployeeFetchingFailure]: (state, action) => {\n        return state\n            .set('isFetching', FAILURE)\n            .set('loading', false)\n            .set('employee', [] )\n            .set('error', action.err)\n            .set('isFetched', false)\n    },\n    [requestEmployeeDeletion]: (state) => {\n        return state\n            .set('isDeleting', DELETING)\n            .set('isDeletingSuccess', false);\n    },\n    [EmployeeDeletionSuccess]: (state) => {\n        return state\n            .set('isDeleting', DELETED)\n            .set('isDeletingSuccess', true);\n    },\n    [EmployeeDeletionFailure]: (state) => {\n        return state\n            .set('isDeleting', FAILURE)\n            .set('isDeletingSuccess', false);\n    },\n    [requestSingleEmployee]: (state) => {\n        return state\n            .set('isFetching', FETCHING)\n            .set('loading', true)\n            .set('SingleEmployee', null)\n            .set('error', null)\n            .set('isFetched', false)\n    },\n    [SingleEmployeeSuccess]: (state, action) => {\n        return state\n            .set('isFetching', FETCHED)\n            .set('loading', false)\n            .set('SingleEmployee', action.employee)\n            .set('error', null)\n            .set('isFetched', true)\n    },\n    [SingleEmployeeFailure]: (state, action) => {\n        return state\n            .set('isFetching', FAILURE)\n            .set('loading', false)\n            .set('SingleEmployee', null )\n            .set('error', action.err)\n            .set('isFetched', false)\n    },\n}, defaultState);\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}