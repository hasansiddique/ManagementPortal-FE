{"ast":null,"code":"import { connect } from 'react-redux';\nimport Authentication from './Auth.view';\nimport { loginUser, logoutUser, registerUser, verifyUserEmail, userPasswordReset, resendEmailVerification, userPasswordUpdate } from './auth.api';\n\nconst mapStateToProps = state => ({\n  user: state.getIn(['auth', 'user']),\n  error: state.getIn(['auth', 'error']),\n  isLoggingIn: state.getIn(['auth', 'isLoggingIn']),\n  isLoggedOut: state.getIn(['auth', 'isLoggedOut']),\n  isLoggingOut: state.getIn(['auth', 'isLoggingOut']),\n  isRegistering: state.getIn(['auth', 'isRegistering']),\n  isEmailVerified: state.getIn(['auth', 'isEmailVerified']),\n  requestingLogin: state.getIn(['auth', 'requestingLogin']),\n  isRegisterSuccess: state.getIn(['auth', 'isRegisterSuccess'])\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    logoutUser: () => {\n      dispatch(logoutUser());\n    },\n    loginUser: payload => {\n      dispatch(loginUser(payload));\n    },\n    registerUser: payload => {\n      dispatch(registerUser(payload));\n    },\n    verifyUserEmail: token => {\n      dispatch(verifyUserEmail(token));\n    },\n    userPasswordReset: token => {\n      dispatch(userPasswordReset(token));\n    },\n    resendEmailVerification: token => {\n      dispatch(resendEmailVerification(token));\n    },\n    userPasswordUpdate: payload => {\n      dispatch(userPasswordUpdate(payload));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Authentication);","map":{"version":3,"sources":["/home/honey/Desktop/Frontend/ManagementPortal-FE/src/views/auth/Auth.container.js"],"names":["connect","Authentication","loginUser","logoutUser","registerUser","verifyUserEmail","userPasswordReset","resendEmailVerification","userPasswordUpdate","mapStateToProps","state","user","getIn","error","isLoggingIn","isLoggedOut","isLoggingOut","isRegistering","isEmailVerified","requestingLogin","isRegisterSuccess","mapDispatchToProps","dispatch","payload","token"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AAEA,OAAOC,cAAP,MAA2B,aAA3B;AACA,SACEC,SADF,EAEEC,UAFF,EAGEC,YAHF,EAIEC,eAJF,EAKEC,iBALF,EAMEC,uBANF,EAOIC,kBAPJ,QAQO,YARP;;AAUA,MAAMC,eAAe,GAAIC,KAAD,KAAY;AAClCC,EAAAA,IAAI,EAAED,KAAK,CAACE,KAAN,CAAY,CAAC,MAAD,EAAS,MAAT,CAAZ,CAD4B;AAElCC,EAAAA,KAAK,EAAEH,KAAK,CAACE,KAAN,CAAY,CAAC,MAAD,EAAS,OAAT,CAAZ,CAF2B;AAGlCE,EAAAA,WAAW,EAAEJ,KAAK,CAACE,KAAN,CAAY,CAAC,MAAD,EAAS,aAAT,CAAZ,CAHqB;AAIlCG,EAAAA,WAAW,EAAEL,KAAK,CAACE,KAAN,CAAY,CAAC,MAAD,EAAS,aAAT,CAAZ,CAJqB;AAKlCI,EAAAA,YAAY,EAAEN,KAAK,CAACE,KAAN,CAAY,CAAC,MAAD,EAAS,cAAT,CAAZ,CALoB;AAMlCK,EAAAA,aAAa,EAAEP,KAAK,CAACE,KAAN,CAAY,CAAC,MAAD,EAAS,eAAT,CAAZ,CANmB;AAOlCM,EAAAA,eAAe,EAAER,KAAK,CAACE,KAAN,CAAY,CAAC,MAAD,EAAS,iBAAT,CAAZ,CAPiB;AAQlCO,EAAAA,eAAe,EAAET,KAAK,CAACE,KAAN,CAAY,CAAC,MAAD,EAAS,iBAAT,CAAZ,CARiB;AASlCQ,EAAAA,iBAAiB,EAAEV,KAAK,CAACE,KAAN,CAAY,CAAC,MAAD,EAAS,mBAAT,CAAZ;AATe,CAAZ,CAAxB;;AAYA,MAAMS,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAQ;AACNnB,IAAAA,UAAU,EAAE,MAAM;AAChBmB,MAAAA,QAAQ,CAACnB,UAAU,EAAX,CAAR;AACD,KAHK;AAIND,IAAAA,SAAS,EAAGqB,OAAD,IAAa;AACtBD,MAAAA,QAAQ,CAACpB,SAAS,CAAEqB,OAAF,CAAV,CAAR;AACD,KANK;AAONnB,IAAAA,YAAY,EAAGmB,OAAD,IAAa;AACzBD,MAAAA,QAAQ,CAAClB,YAAY,CAACmB,OAAD,CAAb,CAAR;AACD,KATK;AAUNlB,IAAAA,eAAe,EAAGmB,KAAD,IAAW;AAC1BF,MAAAA,QAAQ,CAACjB,eAAe,CAACmB,KAAD,CAAhB,CAAR;AACD,KAZK;AAaNlB,IAAAA,iBAAiB,EAAGkB,KAAD,IAAW;AAC5BF,MAAAA,QAAQ,CAAChB,iBAAiB,CAACkB,KAAD,CAAlB,CAAR;AACD,KAfK;AAgBNjB,IAAAA,uBAAuB,EAAGiB,KAAD,IAAW;AAClCF,MAAAA,QAAQ,CAACf,uBAAuB,CAACiB,KAAD,CAAxB,CAAR;AACD,KAlBK;AAmBNhB,IAAAA,kBAAkB,EAAGe,OAAD,IAAa;AAC/BD,MAAAA,QAAQ,CAACd,kBAAkB,CAACe,OAAD,CAAnB,CAAR;AACD;AArBK,GAAR;AAuBD,CAxBD;;AA0BA,eAAevB,OAAO,CAACS,eAAD,EAAkBY,kBAAlB,CAAP,CAA6CpB,cAA7C,CAAf","sourcesContent":["import { connect } from 'react-redux';\n\nimport Authentication from './Auth.view';\nimport {\n  loginUser,\n  logoutUser,\n  registerUser,\n  verifyUserEmail,\n  userPasswordReset,\n  resendEmailVerification,\n    userPasswordUpdate,\n} from './auth.api';\n\nconst mapStateToProps = (state) => ({\n  user: state.getIn(['auth', 'user']),\n  error: state.getIn(['auth', 'error']),\n  isLoggingIn: state.getIn(['auth', 'isLoggingIn']),\n  isLoggedOut: state.getIn(['auth', 'isLoggedOut']),\n  isLoggingOut: state.getIn(['auth', 'isLoggingOut']),\n  isRegistering: state.getIn(['auth', 'isRegistering']),\n  isEmailVerified: state.getIn(['auth', 'isEmailVerified']),\n  requestingLogin: state.getIn(['auth', 'requestingLogin']),\n  isRegisterSuccess: state.getIn(['auth', 'isRegisterSuccess']),\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return ({\n    logoutUser: () => {\n      dispatch(logoutUser());\n    },\n    loginUser: (payload) => {\n      dispatch(loginUser((payload)));\n    },\n    registerUser: (payload) => {\n      dispatch(registerUser(payload));\n    },\n    verifyUserEmail: (token) => {\n      dispatch(verifyUserEmail(token));\n    },\n    userPasswordReset: (token) => {\n      dispatch(userPasswordReset(token));\n    },\n    resendEmailVerification: (token) => {\n      dispatch(resendEmailVerification(token));\n    },\n    userPasswordUpdate: (payload) => {\n      dispatch(userPasswordUpdate(payload))\n    },\n  });\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Authentication);\n"]},"metadata":{},"sourceType":"module"}