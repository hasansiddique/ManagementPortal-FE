{"ast":null,"code":"import { Map } from 'immutable';\nimport { createReducer } from 'redux-act';\nimport { requestEmployeeRecord, EmployeeRecordSuccess, EmployeeRecordFailure } from './Employee.actions';\nimport { FETCHED, FETCHING, FAILURE } from '../../common/constants';\nconst defaultState = Map({\n  record: null,\n  error: null,\n  isFetching: '',\n  isFetched: false\n});\nconst reducer = createReducer({\n  [requestEmployeeRecord]: state => {\n    return state.set('isFetching', FETCHING).set('error', null).set('record', null).set('isFetched', false);\n  },\n  [EmployeeRecordSuccess]: (state, action) => {\n    return state.set('isFetching', FETCHED).set('error', null).set('record', action.record).set('isFetched', true);\n  },\n  [EmployeeRecordFailure]: (state, action) => {\n    return state.set('isFetching', FAILURE).set('error', action.err).set('record', null).set('isFetched', false);\n  }\n}, defaultState);\nexport default reducer;","map":{"version":3,"sources":["/home/honey/Desktop/Frontend/ManagementPortal-FE/src/views/employee/Employee.reducer.js"],"names":["Map","createReducer","requestEmployeeRecord","EmployeeRecordSuccess","EmployeeRecordFailure","FETCHED","FETCHING","FAILURE","defaultState","record","error","isFetching","isFetched","reducer","state","set","action","err"],"mappings":"AAAA,SAASA,GAAT,QAAoB,WAApB;AACA,SAASC,aAAT,QAA8B,WAA9B;AAEA,SACIC,qBADJ,EAEIC,qBAFJ,EAGIC,qBAHJ,QAKK,oBALL;AAOA,SACIC,OADJ,EAEIC,QAFJ,EAGIC,OAHJ,QAIO,wBAJP;AAOA,MAAMC,YAAY,GAAGR,GAAG,CAAE;AACtBS,EAAAA,MAAM,EAAE,IADc;AAEtBC,EAAAA,KAAK,EAAE,IAFe;AAGtBC,EAAAA,UAAU,EAAE,EAHU;AAItBC,EAAAA,SAAS,EAAE;AAJW,CAAF,CAAxB;AAOA,MAAMC,OAAO,GAAGZ,aAAa,CAAC;AAC1B,GAACC,qBAAD,GAA0BY,KAAD,IAAW;AAChC,WAAOA,KAAK,CACPC,GADE,CACE,YADF,EACgBT,QADhB,EAEFS,GAFE,CAEE,OAFF,EAEW,IAFX,EAGFA,GAHE,CAGE,QAHF,EAGY,IAHZ,EAIFA,GAJE,CAIE,WAJF,EAIe,KAJf,CAAP;AAKH,GAPyB;AAQ1B,GAACZ,qBAAD,GAAyB,CAACW,KAAD,EAAQE,MAAR,KAAmB;AACxC,WAAOF,KAAK,CACPC,GADE,CACE,YADF,EACgBV,OADhB,EAEFU,GAFE,CAEE,OAFF,EAEW,IAFX,EAGFA,GAHE,CAGE,QAHF,EAGYC,MAAM,CAACP,MAHnB,EAIFM,GAJE,CAIE,WAJF,EAIe,IAJf,CAAP;AAKH,GAdyB;AAe1B,GAACX,qBAAD,GAAyB,CAACU,KAAD,EAAQE,MAAR,KAAmB;AACxC,WAAOF,KAAK,CACPC,GADE,CACE,YADF,EACgBR,OADhB,EAEFQ,GAFE,CAEE,OAFF,EAEWC,MAAM,CAACC,GAFlB,EAGFF,GAHE,CAGE,QAHF,EAGY,IAHZ,EAIFA,GAJE,CAIE,WAJF,EAIe,KAJf,CAAP;AAKH;AArByB,CAAD,EAsB1BP,YAtB0B,CAA7B;AAwBA,eAAeK,OAAf","sourcesContent":["import { Map } from 'immutable';\nimport { createReducer } from 'redux-act';\n\nimport {\n    requestEmployeeRecord,\n    EmployeeRecordSuccess,\n    EmployeeRecordFailure,\n}\nfrom './Employee.actions'\n\nimport {\n    FETCHED,\n    FETCHING,\n    FAILURE,\n} from '../../common/constants';\n\n\nconst defaultState = Map( {\n    record: null,\n    error: null,\n    isFetching: '',\n    isFetched: false,\n})\n\nconst reducer = createReducer({\n    [requestEmployeeRecord]: (state) => {\n        return state\n            .set('isFetching', FETCHING)\n            .set('error', null)\n            .set('record', null)\n            .set('isFetched', false);\n    },\n    [EmployeeRecordSuccess]: (state, action) => {\n        return state\n            .set('isFetching', FETCHED)\n            .set('error', null)\n            .set('record', action.record)\n            .set('isFetched', true);\n    },\n    [EmployeeRecordFailure]: (state, action) => {\n        return state\n            .set('isFetching', FAILURE)\n            .set('error', action.err)\n            .set('record', null)\n            .set('isFetched', false);\n    },\n}, defaultState);\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}